webpackJsonp([0x70bff8d6df42],{600:function(a,e){a.exports={data:{markdownRemark:{excerpt:"Today we're releasing a gem to make it easier to use React and JSX in Ruby on\nRails applications:  react-rails . This gem has 2 primary purposes: To package  react.js  in a way that's easy to use and easy to update. To allow you to write JSX withoutâ€¦",html:'<p>Today we\'re releasing a gem to make it easier to use React and JSX in Ruby on\nRails applications: <a href="https://github.com/facebook/react-rails">react-rails</a>.</p>\n<p>This gem has 2 primary purposes:</p>\n<ol>\n<li>To package <code>react.js</code> in a way that\'s easy to use and easy to update.</li>\n<li>To allow you to write JSX without an external build step to transform that\ninto JS.</li>\n</ol>\n<h2>Packaging react.js</h2>\n<p>To make <code>react.js</code> available for use client-side, simply add <code>react</code> to your\nmanifest, and declare the variant you\'d like to use in your environment. When\nyou use <code>:production</code>, the minified and optimized <code>react.min.js</code> will be used\ninstead of the development version. For example:</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-ruby"><code><span class="token comment"># config/environments/development.rb</span>\n\n<span class="token constant">MyApp</span><span class="token punctuation">:</span><span class="token symbol">:Application</span><span class="token punctuation">.</span>configure <span class="token keyword">do</span>\n  config<span class="token punctuation">.</span>react<span class="token punctuation">.</span>variant <span class="token operator">=</span> <span class="token symbol">:development</span>\n  <span class="token comment"># use :production in production.rb</span>\n<span class="token keyword">end</span>\n</code></pre>\n      </div>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-js"><code><span class="token comment">// app/assets/javascript/application.js</span>\n\n<span class="token comment">//= require react</span>\n</code></pre>\n      </div>\n<h2>Writing JSX</h2>\n<p>When you name your file with <code>myfile.js.jsx</code>, <code>react-rails</code> will automatically\ntry to transform that file. For the time being, we still require that you\ninclude the docblock at the beginning of the file. For example, this file will\nget transformed on request.</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-js"><code><span class="token comment">/** @jsx React.DOM */</span>\nReact<span class="token punctuation">.</span><span class="token function">renderComponent</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>MyComponent <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"example"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<h2>Asset Pipeline</h2>\n<p><code>react-rails</code> takes advantage of the <a href="http://guides.rubyonrails.org/asset_pipeline.html">asset\npipeline</a> that was introduced\nin Rails 3.1. A very important part of that pipeline is the <code>assets:precompile</code>\nRake task. <code>react-rails</code> will ensure that your JSX files will be transformed\ninto regular JS before all of your assets are minified and packaged.</p>\n<h2>Installation</h2>\n<p>Installation follows the same process you\'re familiar with. You can install it\nglobally with <code>gem install react-rails</code>, though we suggest you add the\ndependency to your <code>Gemfile</code> directly.</p>',frontmatter:{date:"July 12, 2017",path:"ruby",title:"Use React and JSX in Ruby on Rails"}}},pathContext:{id:"ruby"}}}});
//# sourceMappingURL=path---blog-ruby-8611fafab641947941d8.js.map
webpackJsonp([0xa192a3d65e4d],{588:function(n,s){n.exports={data:{markdownRemark:{excerpt:"While I was trying to style this blog, I ran into problems selecting my DOM\ncomponents. Since I had some time, I decided to go back to the basics to\nunderstand CSS Selectors and the order of precedence between styling rules. Basic Selectors Basicâ€¦",html:'<p>While I was trying to style this blog, I ran into problems selecting my DOM\ncomponents. Since I had some time, I decided to go back to the basics to\nunderstand CSS Selectors and the order of precedence between styling rules.</p>\n<h3>Basic Selectors</h3>\n<p>Basic selectors involve only a single rule. If the html element in question\nfulfills that singular rule, it will be selected for styling.</p>\n<h5><strong>Element Selector</strong></h5>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-css"><code><span class="token comment">/*element selector*/</span>\n<span class="token selector">p</span> <span class="token punctuation">{</span>\n  <span class="token property">background-color</span><span class="token punctuation">:</span> #eee<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>The element selecter is the most basic amongst all CSS selectors. It simply\nselects all html elements with the given type.</p>\n<p><strong>Class Selector</strong></p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-css"><code><span class="token comment">/*class selector*/</span>\n<span class="token selector">.background</span> <span class="token punctuation">{</span>\n  <span class="token property">background-color</span><span class="token punctuation">:</span> #eee<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>The class selector selects all html elements with the background class\nattribute. If an element implements multiple classes, the element will be styled\nby the styling rules all of the classes. Since the styles on the left are\napplied before the styles on the right, classes on the right take precedence\nover classes on the left.</p>\n<p><strong>ID Selector</strong></p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-css"><code><span class="token comment">/*id selector*/</span>\n<span class="token selector">#grey-bg</span> <span class="token punctuation">{</span>\n  <span class="token property">background-color</span><span class="token punctuation">:</span> #eee<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>The ID selector above will select <strong>the</strong> html element with id=\'grey-bg\'. Since\nhtml IDs are unique, ID selectors affect only a single element within any given\nDOM.</p>\n<p><strong>Universal selector</strong></p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-css"><code><span class="token comment">/*universal selector*/</span>\n<span class="token selector">*</span> <span class="token punctuation">{</span>\n  <span class="token property">background-color</span><span class="token punctuation">:</span> #eee<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Within programming nomenclature, the * character often takes on a universal\nvalue. Similarly in CSS, the universal selector will style <strong>EVERYTHING</strong> in the\nDOM with its rules.</p>\n<h3>Combination Selectors</h3>\n<p>Combination selectors involve more than one rule. It combines multiple selectors\ntogether using binary operators. Similar to arithmetic expressions, combination\nselectors are also expressions. The table below will map out their parallels.</p>\n<table>\n<thead>\n<tr>\n<th align="center">Expressions</th>\n<th align="center">Arithmetic Expressions</th>\n<th align="center">Combination Selectors</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align="center">Operands</td>\n<td align="center">numbers</td>\n<td align="center">html elements</td>\n</tr>\n<tr>\n<td align="center">Binary Operators</td>\n<td align="center">+, -, \n*\n, /</td>\n<td align="center">Combinators</td>\n</tr>\n<tr>\n<td align="center">Expressions</td>\n<td align="center">3 + 2 / 4</td>\n<td align="center">div > p + p</td>\n</tr>\n</tbody>\n</table>\n<h3>Combinators</h3>\n<p>Combinators are the binary operators used in combination selectors. This section\nwill explain the four main combinators.</p>\n<h5><strong>Descendant combinator - \' \'</strong></h5>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-css"><code><span class="token comment">/*descendant selector*/</span>\n<span class="token selector">div p</span> <span class="token punctuation">{</span>\n  <span class="token property">background-color</span><span class="token punctuation">:</span> #eee<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>The descendant selector above selects all p elements in the DOM that are\ndescendants of div elements. Notice that the descendant combinator is simply a\nwhitespace character.</p>\n<h5><strong>Child combinator - \'>\'</strong></h5>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-css"><code><span class="token comment">/*child selector*/</span>\n<span class="token selector">div > p</span> <span class="token punctuation">{</span>\n  <span class="token property">background-color</span><span class="token punctuation">:</span> #eee<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>The child relation is a special case of the descendant relation : A child is a\ndirect descendant.</p>\n<p>The child selector above selects all p elements in the DOM that are children\n(direct descendants) of any div elements. The child combinator is denoted by the\n\'>\' character.</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>\n\t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span> Hello World! <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n</code></pre>\n      </div>\n<p>In the html snippet above, "Hello World!" will be selected by the "div p"\ncombination selector but not by the "div > p" combination selector.</p>\n<p><strong>General sibling selectors - \'~\'</strong></p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-css"><code><span class="token comment">/*general sibling selector*/</span>\n<span class="token selector">div ~ p</span> <span class="token punctuation">{</span>\n  <span class="token property">background-color</span><span class="token punctuation">:</span> #eee<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>The adjacent sibling selector above selects for all p elements that are siblings\nany div elements.</p>\n<p><strong>Adjacent sibling combinator - \'+\'</strong></p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-css"><code><span class="token comment">/*adjacent sibling selector*/</span>\n<span class="token selector">div + p</span> <span class="token punctuation">{</span>\n  <span class="token property">background-color</span><span class="token punctuation">:</span> #eee<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>The adjacent sibling relation is a special case of the general sibling relation\nin that they are adjacent to each other.</p>\n<p>The adjacent sibling selector above selects for all p elements that immediately\nfollow any div element.</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n</code></pre>\n      </div>\n<p>In the html snipped above, the "div + p" combination selector will style "Hello"\nbut not "World". The "div ~ p" combination selector will style both "Hello" and\n"World".</p>\n<h3>Attribute Selector</h3>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-css"><code><span class="token comment">/*attribute selector*/</span>\n<span class="token selector">p[attr="val"]</span> <span class="token punctuation">{</span>\n  <span class="token property">background-color</span><span class="token punctuation">:</span> #eee<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>The attribute selector is also a combinator selector. However, unlike other\ncombinators, the attribute combinator is a ternary operator and involves only\none element. The above attribute selector will select all p tags with the "attr"\nattribute containing the value "val".</p>\n<h3>Pseudo-elements</h3>\n<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements">Pseudo-elements</a>\nare abstractions of the tree representing entities beyond what HTML does. For\nexample, HTML doesn\'t have an element describing the first letter or line of a\nparagraph, or the marker of a list. Pseudo-elements represent these entities and\nallow CSS rules to be associated with them. that way, these entitities can be\nstyled independently. <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors">(source: Mozilla Web\nDocs)</a></p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-css"><code><span class="token comment">/*pseudo elements selector*/</span>\n<span class="token selector">section::after</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> #dddddd<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>The pseudo element selector above creates a pseudo-element "after" that is the\nlast child of the selected element "section". The pseudo-element does not exist\nas an element in the DOM but can be used to apply cosmetic rules to specific\nparts of the selected element.</p>\n<h3>Pseudo-classes</h3>\n<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes">Pseudo-classes</a>\nallow us to select elements based on information that is not contained in the\ndocument tree like a state or that is particularly complex to extract. E.g. they\nmatch if a link has been previously visited or not. <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors">(source: Mozilla Web\nDocs)</a></p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-css"><code><span class="token comment">/*pseudo class selector*/</span>\n<span class="token selector">a:visited</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> #dddddd<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Ever wondered why links that are clicked are often coloured differently? Anchor\ntags are styled by the browser\'s default style sheet using the pseudo class\nselector. It helps to think of pseudo-classes as dynamic states that elements\ntake on based on certain interactions. For instance, whether a link is visited\nor not, whether we are currently hovering over a specific element, or whether\nthe element is active.</p>\n<h3>Order of precedence</h3>\n<p>The "Cascading" in CSS means that styles can fall (or cascade) from one style\nsheet to another, enabling multiple style sheets to be used on a single HTML\ndocument. <a href="http://css.maxdesign.com.au/selectutorial/advanced_cascade.htm">(source:\nmaxdesign)</a></p>\n<p>The issue with multiple stylesheets is that the browser often receives\nconflicting instructions. How does the browser then deconflict the different\nstyling rules? It does so using a simple order of precedence which we will\nexplain in this section.</p>\n<h5>Styles from different sources</h5>\n<p>First, recognise that there are three sources from which our browser obtains its\nstyles.</p>\n<ol>\n<li>Browser default stylesheet</li>\n<li>User-specified stylesheet</li>\n<li>Author stylesheet</li>\n</ol>\n<p>The browser first applies its own default stylesheet, followed by the\nuser-specified stylesheet, then the author stylesheet. In case of a styling\nconflict, styles defined later will always override its earlier defined\ncounterparts.</p>\n<h5>Specificity</h5>\n<p>CSS cascade assigns a weight to each style rule. When several rules apply to the\nsame element, the rule with the greatest weight takes precedence. Selectors that\nare more specific will be given a greater weight compared to less specific\nselectors.</p>\n<p>Consider the below code snippets.</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-css"><code><span class="token comment">/*index.css*/</span>\n<span class="token selector">body > div</span> <span class="token punctuation">{</span>\n  <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">div</span> <span class="token punctuation">{</span>\n  <span class="token property">background-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">*</span> <span class="token punctuation">{</span>\n  <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-html"><code><span class="token comment">&lt;!--index.html--></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n    Hello World!\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n</code></pre>\n      </div>\n<p><em>What color will "Hello World!" be displayed in?</em></p>\n<blockquote>\n<p>It will be displayed in red. Test it out in your browser to convince yourself.</p>\n</blockquote>\n<p><em>Why is it red though?</em></p>\n<p>The browser calculates specificity based on three variables:</p>\n<ul>\n<li>A - count of id selectors (weight = 100)</li>\n<li>B - count of class and attribute selectors (weight = 10)</li>\n<li>C - count of type selectors (weight = 1)</li>\n</ul>\n<p>The code snippet below will illustrate different selectors and their specificity\nvalues.</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-css"><code>* \t\t\t<span class="token comment">/* a=0 b=0 c=0 -> specificity = 0 */</span>\nLI\t\t\t<span class="token comment">/* a=0 b=0 c=1 -> specificity = 1 */</span>\nUL LI\t\t<span class="token comment">/* a=0 b=0 c=2 -> specificity = 2 */</span>\nLI.red \t\t<span class="token comment">/* a=0 b=1 c=1 -> specificity = 11 */</span>\n#content\t<span class="token comment">/* a=1 b=0 c=0 -> specificity = 100 */</span>\n</code></pre>\n      </div>\n<h5>The !important property</h5>\n<p>Styles defined alongside the !important property will be applied with top\npriority. Think of it as brackets in arithmetic expressions.</p>\n<p>Important styles can only be overruled by another important style or by in-line\nstyles defined within the element itself.</p>\n<blockquote>\n<p>Since CSS is defined in the html head, styles defined in the body will\nnaturally be applied later and thus overrides all CSS styles.</p>\n</blockquote>\n<p>The !important property can be used as follows:</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-css"><code><span class="token selector">.class</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> red <span class="token important">!important</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>',frontmatter:{date:"August 18, 2017",path:"css selectors",title:"CSS Selectors and orders of precedence"}}},pathContext:{id:"css selectors"}}}});
//# sourceMappingURL=path---blog-css-selectors-319d7d2d9c584d399f20.js.map
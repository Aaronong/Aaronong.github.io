{"version":3,"sources":["webpack:///path---blog-wu-li-hao-99f3434ebf136854908c.js","webpack:///./.cache/json/blog-wu-li-hao.json"],"names":["webpackJsonp","603","module","exports","data","markdownRemark","excerpt","html","frontmatter","date","path","title","pathContext","id"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,QAAA,8PAAAC,KAAA,usXAAu/MC,aAAuiLC,KAAA,oBAAAC,KAAA,UAAAC,MAAA,uBAA0EC,aAAgBC,GAAA","file":"path---blog-wu-li-hao-99f3434ebf136854908c.js","sourcesContent":["webpackJsonp([210618213037549],{\n\n/***/ 603:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"excerpt\":\"Over the last three months, my team and I have been working with a local food\\nsupplier called Wu Li Hao Pte Ltd to migrate the logistics of their business\\nonto a digital platform. This week we went down to their office to deploy our\\nproduct. Apartâ€¦\",\"html\":\"<p>Over the last three months, my team and I have been working with a local food\\nsupplier called Wu Li Hao Pte Ltd to migrate the logistics of their business\\nonto a digital platform. This week we went down to their office to deploy our\\nproduct. Apart from the driver and customer apps that we have released on both\\nthe <a href=\\\"https://play.google.com/store/search?q=wulihao\\\">Android</a> and\\n<a href=\\\"http://aaronongcs.surge.sh/appleStore.jpg\\\">Apple</a> store. We successfully\\ndeployed a production server and database for them. Our products are being beta\\ntested by some of their clients right now. This post highlights some of our\\nfunctional specifications.</p>\\n<h3>Problem Statement</h3>\\n<p>Wu Li Hao Pte Ltd is a noodle supplier based in Singapore that distributes\\nnoodles to their clients. Their main clients are noodle shop owners who buy\\ntheir noodles in bulk and frequently makes repeat orders of the same noodles.</p>\\n<p>They currently take their orders by means of phone calls, and as they have\\nscaled, they have found the administrative overhead associated with picking up\\ncalls on a daily basis unproductive to handle. As a single staff has to be on\\nstandby to pick calls up at all time. Interrupting their work.</p>\\n<p>Their main customers are noodle shop owners who generally do not understand how\\nto use web platforms well, so they have requested for a mobile app due to its\\nease of use. As their customers generally do not own credit cards, they have\\nrequested for payments not to be part of the application. But they expressed\\nthat their customers often forget to bring cash, so we suggested implementing a\\ntab feature.</p>\\n<p>They also want a way for their App's users to toggle between English and\\nMandarin.</p>\\n<p>Upon advicing them, I figured out that they need 3 different views. One for the\\ncustomer,one for the admin, and one for the delivery drivers. I will detail the\\nuser stories below.</p>\\n<p>They are also looking for a feature that integrates with their accounting tool.\\nCurrently thinking of doing it in two ways. Either calling their accounting tool\\napi (if that is available), or exporting to a csv/xml which the accounting tool\\nthen imports.</p>\\n<p>They want a way to automate the generation of receipts as well.</p>\\n<p>Branding wise, they are looking for minimal branding, they said their users dont\\ncare. But our experience with ui/ux is that good design is not just for looking\\ngood. Its making it easier for users to use them. So we are gonna provide them a\\ngood ui for their needs.</p>\\n<p>Currently the timeline for this project is 4 months and the total payout is $xx.\\nThey will be paying for the servers that we will help them host. Pass them the\\ncredentials, but we will manage it for a maintenance contract if they need it.</p>\\n<p>We will look only to support up to the last 3 yrs of android and iOS versions</p>\\n<h1>Functional</h1>\\n<h3>Feature Set</h3>\\n<h5><u>Customers</h5>\\n</u>\\n<ul>\\n<li>React Native App</li>\\n<li>English &#x26; Mandarin Support</li>\\n<li>Log in - Stay logged in until credentials fail (if admin change)</li>\\n<li>\\n<p>Order History</p>\\n<ul>\\n<li>Place new orders</li>\\n<li>Cancel orders - before 12 midnight on the same day of ordering.</li>\\n<li>Change order details - before 12 as well</li>\\n</ul>\\n</li>\\n<li>\\n<p>Tab</p>\\n<ul>\\n<li>Track unpaid orders</li>\\n<li>Total unpaid amount</li>\\n</ul>\\n</li>\\n<li>\\n<p>Storefront</p>\\n<ul>\\n<li>View all products available to them, add them to cart.</li>\\n</ul>\\n</li>\\n<li>\\n<p>Cart</p>\\n<ul>\\n<li>Checkout Cart</li>\\n<li>Edit delivery address (changing postal code autopopulates address)</li>\\n</ul>\\n</li>\\n<li>\\n<p>Profile Page</p>\\n<ul>\\n<li>Change Address, Contact Number, General Delivery Details</li>\\n</ul>\\n</li>\\n<li>View Notifications (set by admin)</li>\\n</ul>\\n<h5><u>Driver</h5>\\n</u>\\n<ul>\\n<li>React Native App</li>\\n<li>English &#x26; Mandarin Support</li>\\n<li>Log In - Stay logged in until credentials fail (if admin change)</li>\\n<li>\\n<p>Delivery List</p>\\n<ul>\\n<li>Track all deliveries to be made for the day</li>\\n<li>Click into individual order to</li>\\n<li>\\n<p>Change order status</p>\\n<ul>\\n<li>Ordered >> On Route >> Delivered >> Paid</li>\\n</ul>\\n</li>\\n<li>View unpaid orders from same customer</li>\\n<li>Re-order delivery in list</li>\\n<li>Long Press to Drag and Drop</li>\\n</ul>\\n</li>\\n<li>\\n<p>Inventory List</p>\\n<ul>\\n<li>Track how many items collected (split into broad categories)</li>\\n<li>Track how many items delivered</li>\\n</ul>\\n</li>\\n<li>\\n<p>Payment List</p>\\n<ul>\\n<li>Track total amount to be collected</li>\\n<li>Track total amount collected (Sum of orders in paid status)</li>\\n<li>Track total amount placed on tab (Sum of orders in Delivered status)</li>\\n</ul>\\n</li>\\n</ul>\\n<h5><u>Admin</h5>\\n</u>\\n<ul>\\n<li>Electron Native App</li>\\n<li>English &#x26; Mandarin Support</li>\\n<li>\\n<p>User Account Management</p>\\n<ul>\\n<li>Create new user account</li>\\n<li>Edit user account (username, pw, address, phone, general delivery details)</li>\\n<li>Delete user account</li>\\n<li>Manage user orders (change status, cancel order, edit order)</li>\\n<li>Manage user storefront</li>\\n<li>Add items (and allowed options)</li>\\n<li>Add price</li>\\n</ul>\\n</li>\\n<li>\\n<p>Storefront Management</p>\\n<ul>\\n<li>Manage category (noodle, dumpling skin, ...)</li>\\n<li>Manage item (add new noodle, ban mian, photo)</li>\\n<li>Manage item options (add ban mian with thickness, 5mm, 3mm, 2mm)</li>\\n<li>Set generic price (one price per item/item option - kai clarify)</li>\\n</ul>\\n</li>\\n<li>\\n<p>Order Management</p>\\n<ul>\\n<li>Track all orders - Default only store 1 month old on frontend</li>\\n<li>filter/sort by ANY FIELD</li>\\n<li>edit uncompleted orders</li>\\n</ul>\\n</li>\\n<li>\\n<p>Driver Management</p>\\n<ul>\\n<li>View how many orders each driver has to make</li>\\n<li>redistribute orders between drivers to even workload</li>\\n</ul>\\n</li>\\n<li>\\n<p>Integration with Accounting Tool</p>\\n<ul>\\n<li>Export orders that have not been exported into XLSX, require remote testing\\nwith accounting tool (auto count)</li>\\n</ul>\\n</li>\\n<li>\\n<p>Printing Invoices</p>\\n<ul>\\n<li>Populate invoice template based on order data</li>\\n<li>Every night at 12 midnight, auto print invoices that have not been printed</li>\\n</ul>\\n</li>\\n</ul>\\n<h1>Technical</h1>\\n<h3>Tech Stack &#x26; Rationale</h3>\\n<h5><u>Communication - GraphQL</h5>\\n</u>\\n<p>The decision to use GraphQL is mainly due to the fact that the app requires\\nmultiple query patterns and parameters. Using a traditional API method would\\nresult in high coupling between the Front-end and Back-end and our high degree\\nof configurability would require at least 20 API end points.</p>\\n<p>The additional benefit of using GraphQL is the ability for the Front-end to\\nsubscribe to Back-end events. This is especially useful for the Admin Electron\\nFront-end since we do not wish to refresh all the information in the information\\nheavy front-end whenever we navigate between pages.</p>\\n<h5><u>Database - PostgreSQL</h5>\\n</u>\\n<p>We are only required to deal with structured data so SQL is a clear choice.\\nPostgreSQL is a reliable and open source SQL database that scales very well.</p>\\n<h5><u>Backend - NodeJS</h5>\\n</u>\\n<p>NodeJS is just a good all-purpose language suited for our needs. It consists of\\nall the tools that we require to integrate with the other moving parts.</p>\\n<p>We will use Sequelize to connect with PostgreSQL and Express as our backend\\nframework. Since we are using GraphQL, we only need to serve a single route thus\\na minimalistic and unopinionated framework like express will be sufficient.</p>\\n<h5><u>Mobile - React Native</h5>\\n</u>\\n<p>React Native was selected to be the mobile presentation layer since we required\\na cross-platform mobile application. Our Driver and Customer mobile applications\\ndo not require any platform specific features so react native is a clear choice.</p>\\n<h5><u>Mobile - AsyncStorage</h5>\\n</u>\\n<p>AsyncStorage was chosen to be the mobile application local storege. AsyncStorage\\nis a simple key-value store, which will more than suffice for the small number\\nof information we are required to manage on the mobile application end.</p>\\n<h5><u>Desktop - Electron</h5>\\n</u>\\n<p>We chose Electron to be the Admin dashboard Front-end because we required a\\ndesktop application that could connect with our GraphQL backend. We did not\\nconsider building the admin dashboard as a web-app because:</p>\\n<ul>\\n<li>We did not wish to expose our admin platform on the web (insecure)</li>\\n<li>We needed a fast responsiveness and persistence (speed)</li>\\n</ul>\\n<h5><u>Desktop - NeDB</h5>\\n</u>\\n<p>NeDB is a NoSQL document store. It allows us to store the heavy-queries we\\nreceive from GraphQL straight into the local store as a json object. We can\\nupdate, read, and query the local database quickly using NeDB.</p>\\n<h3>Development Tools</h3>\\n<ul>\\n<li><a href=\\\"https://www.getpostman.com/postman\\\">Postman</a> - API development environment</li>\\n<li><a href=\\\"https://sqlectron.github.io/\\\">SQLectron</a> - SQL client supporting multiple DBs</li>\\n<li><a href=\\\"https://github.com/graphql/graphiql\\\">GraphiQL</a> - GraphQL IDE</li>\\n<li><a href=\\\"https://code.visualstudio.com/\\\">Visual Studio Code</a> - Best code editor. Made\\nfor Web/Javascript development</li>\\n<li><a href=\\\"https://typora.io/\\\">Typora</a> - Best Markdown editor</li>\\n</ul>\\n<h1>Miscellaneous</h1>\\n<h3>Meeting 1 Notes - 30 August 2017</h3>\\n<ul>\\n<li>noodle suppliers</li>\\n<li>needs a ecommerce platform that integrates with their accounting tool and\\nhopefully their delivery tool as well.</li>\\n<li>looking to expand to households (marketing)</li>\\n<li>average user is rather weak in using software, would prefer a mobile app.</li>\\n<li>Users always order same thing.</li>\\n<li>logo, softwares, invoice</li>\\n<li>Support up to 3 yrs about</li>\\n<li>manage tab</li>\\n<li>invoice upon order</li>\\n<li>Need an invoice</li>\\n</ul>\\n<h3>Meeting 2 Notes - 23 August 2017</h3>\\n<ul>\\n<li>require english and chinese language support on all 3 platforms</li>\\n<li>adviced them to deploy admin app as a native app with calls to server\\n(security, speed)</li>\\n<li>allow order cancellation before 12 midnight</li>\\n<li>figured out the import format for their accounting tool</li>\\n<li>require advanced search features on their order dashboard</li>\\n</ul>\\n<h3>Questions for Wu Li Hao</h3>\\n<ul>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" checked disabled> Invoice (for generation invoice template)</p>\\n</li>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" checked disabled> Logo (for design)</p>\\n</li>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" disabled> Products (and customization - noodle thickness)</p>\\n</li>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" checked disabled> How the product packaging looks (for merging with our design)</p>\\n</li>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" checked disabled> Onsite analysis of accounting software (for backend integration)</p>\\n</li>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" checked disabled> Onsite analysis of delivery software (to understand their delivery model)</p>\\n</li>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" checked disabled> Do drivers have a delivery list? (to understand delivery model)</p>\\n</li>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" checked disabled> When do you do accounting? By Day? Week? Month? (to understand accounting\\nmodel)</p>\\n</li>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" checked disabled> How much in advance must the customer book?</p>\\n</li>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" checked disabled> Do customers make repeat bookings?</p>\\n</li>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" checked disabled> Can customers cancel orders?</p>\\n</li>\\n</ul>\\n<p>â€‹</p>\",\"frontmatter\":{\"date\":\"December 23, 2017\",\"path\":\"WuLiHao\",\"title\":\"Wu Li Hao Project\"}}},\"pathContext\":{\"id\":\"WuLiHao\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---blog-wu-li-hao-99f3434ebf136854908c.js","module.exports = {\"data\":{\"markdownRemark\":{\"excerpt\":\"Over the last three months, my team and I have been working with a local food\\nsupplier called Wu Li Hao Pte Ltd to migrate the logistics of their business\\nonto a digital platform. This week we went down to their office to deploy our\\nproduct. Apartâ€¦\",\"html\":\"<p>Over the last three months, my team and I have been working with a local food\\nsupplier called Wu Li Hao Pte Ltd to migrate the logistics of their business\\nonto a digital platform. This week we went down to their office to deploy our\\nproduct. Apart from the driver and customer apps that we have released on both\\nthe <a href=\\\"https://play.google.com/store/search?q=wulihao\\\">Android</a> and\\n<a href=\\\"http://aaronongcs.surge.sh/appleStore.jpg\\\">Apple</a> store. We successfully\\ndeployed a production server and database for them. Our products are being beta\\ntested by some of their clients right now. This post highlights some of our\\nfunctional specifications.</p>\\n<h3>Problem Statement</h3>\\n<p>Wu Li Hao Pte Ltd is a noodle supplier based in Singapore that distributes\\nnoodles to their clients. Their main clients are noodle shop owners who buy\\ntheir noodles in bulk and frequently makes repeat orders of the same noodles.</p>\\n<p>They currently take their orders by means of phone calls, and as they have\\nscaled, they have found the administrative overhead associated with picking up\\ncalls on a daily basis unproductive to handle. As a single staff has to be on\\nstandby to pick calls up at all time. Interrupting their work.</p>\\n<p>Their main customers are noodle shop owners who generally do not understand how\\nto use web platforms well, so they have requested for a mobile app due to its\\nease of use. As their customers generally do not own credit cards, they have\\nrequested for payments not to be part of the application. But they expressed\\nthat their customers often forget to bring cash, so we suggested implementing a\\ntab feature.</p>\\n<p>They also want a way for their App's users to toggle between English and\\nMandarin.</p>\\n<p>Upon advicing them, I figured out that they need 3 different views. One for the\\ncustomer,one for the admin, and one for the delivery drivers. I will detail the\\nuser stories below.</p>\\n<p>They are also looking for a feature that integrates with their accounting tool.\\nCurrently thinking of doing it in two ways. Either calling their accounting tool\\napi (if that is available), or exporting to a csv/xml which the accounting tool\\nthen imports.</p>\\n<p>They want a way to automate the generation of receipts as well.</p>\\n<p>Branding wise, they are looking for minimal branding, they said their users dont\\ncare. But our experience with ui/ux is that good design is not just for looking\\ngood. Its making it easier for users to use them. So we are gonna provide them a\\ngood ui for their needs.</p>\\n<p>Currently the timeline for this project is 4 months and the total payout is $xx.\\nThey will be paying for the servers that we will help them host. Pass them the\\ncredentials, but we will manage it for a maintenance contract if they need it.</p>\\n<p>We will look only to support up to the last 3 yrs of android and iOS versions</p>\\n<h1>Functional</h1>\\n<h3>Feature Set</h3>\\n<h5><u>Customers</h5>\\n</u>\\n<ul>\\n<li>React Native App</li>\\n<li>English &#x26; Mandarin Support</li>\\n<li>Log in - Stay logged in until credentials fail (if admin change)</li>\\n<li>\\n<p>Order History</p>\\n<ul>\\n<li>Place new orders</li>\\n<li>Cancel orders - before 12 midnight on the same day of ordering.</li>\\n<li>Change order details - before 12 as well</li>\\n</ul>\\n</li>\\n<li>\\n<p>Tab</p>\\n<ul>\\n<li>Track unpaid orders</li>\\n<li>Total unpaid amount</li>\\n</ul>\\n</li>\\n<li>\\n<p>Storefront</p>\\n<ul>\\n<li>View all products available to them, add them to cart.</li>\\n</ul>\\n</li>\\n<li>\\n<p>Cart</p>\\n<ul>\\n<li>Checkout Cart</li>\\n<li>Edit delivery address (changing postal code autopopulates address)</li>\\n</ul>\\n</li>\\n<li>\\n<p>Profile Page</p>\\n<ul>\\n<li>Change Address, Contact Number, General Delivery Details</li>\\n</ul>\\n</li>\\n<li>View Notifications (set by admin)</li>\\n</ul>\\n<h5><u>Driver</h5>\\n</u>\\n<ul>\\n<li>React Native App</li>\\n<li>English &#x26; Mandarin Support</li>\\n<li>Log In - Stay logged in until credentials fail (if admin change)</li>\\n<li>\\n<p>Delivery List</p>\\n<ul>\\n<li>Track all deliveries to be made for the day</li>\\n<li>Click into individual order to</li>\\n<li>\\n<p>Change order status</p>\\n<ul>\\n<li>Ordered >> On Route >> Delivered >> Paid</li>\\n</ul>\\n</li>\\n<li>View unpaid orders from same customer</li>\\n<li>Re-order delivery in list</li>\\n<li>Long Press to Drag and Drop</li>\\n</ul>\\n</li>\\n<li>\\n<p>Inventory List</p>\\n<ul>\\n<li>Track how many items collected (split into broad categories)</li>\\n<li>Track how many items delivered</li>\\n</ul>\\n</li>\\n<li>\\n<p>Payment List</p>\\n<ul>\\n<li>Track total amount to be collected</li>\\n<li>Track total amount collected (Sum of orders in paid status)</li>\\n<li>Track total amount placed on tab (Sum of orders in Delivered status)</li>\\n</ul>\\n</li>\\n</ul>\\n<h5><u>Admin</h5>\\n</u>\\n<ul>\\n<li>Electron Native App</li>\\n<li>English &#x26; Mandarin Support</li>\\n<li>\\n<p>User Account Management</p>\\n<ul>\\n<li>Create new user account</li>\\n<li>Edit user account (username, pw, address, phone, general delivery details)</li>\\n<li>Delete user account</li>\\n<li>Manage user orders (change status, cancel order, edit order)</li>\\n<li>Manage user storefront</li>\\n<li>Add items (and allowed options)</li>\\n<li>Add price</li>\\n</ul>\\n</li>\\n<li>\\n<p>Storefront Management</p>\\n<ul>\\n<li>Manage category (noodle, dumpling skin, ...)</li>\\n<li>Manage item (add new noodle, ban mian, photo)</li>\\n<li>Manage item options (add ban mian with thickness, 5mm, 3mm, 2mm)</li>\\n<li>Set generic price (one price per item/item option - kai clarify)</li>\\n</ul>\\n</li>\\n<li>\\n<p>Order Management</p>\\n<ul>\\n<li>Track all orders - Default only store 1 month old on frontend</li>\\n<li>filter/sort by ANY FIELD</li>\\n<li>edit uncompleted orders</li>\\n</ul>\\n</li>\\n<li>\\n<p>Driver Management</p>\\n<ul>\\n<li>View how many orders each driver has to make</li>\\n<li>redistribute orders between drivers to even workload</li>\\n</ul>\\n</li>\\n<li>\\n<p>Integration with Accounting Tool</p>\\n<ul>\\n<li>Export orders that have not been exported into XLSX, require remote testing\\nwith accounting tool (auto count)</li>\\n</ul>\\n</li>\\n<li>\\n<p>Printing Invoices</p>\\n<ul>\\n<li>Populate invoice template based on order data</li>\\n<li>Every night at 12 midnight, auto print invoices that have not been printed</li>\\n</ul>\\n</li>\\n</ul>\\n<h1>Technical</h1>\\n<h3>Tech Stack &#x26; Rationale</h3>\\n<h5><u>Communication - GraphQL</h5>\\n</u>\\n<p>The decision to use GraphQL is mainly due to the fact that the app requires\\nmultiple query patterns and parameters. Using a traditional API method would\\nresult in high coupling between the Front-end and Back-end and our high degree\\nof configurability would require at least 20 API end points.</p>\\n<p>The additional benefit of using GraphQL is the ability for the Front-end to\\nsubscribe to Back-end events. This is especially useful for the Admin Electron\\nFront-end since we do not wish to refresh all the information in the information\\nheavy front-end whenever we navigate between pages.</p>\\n<h5><u>Database - PostgreSQL</h5>\\n</u>\\n<p>We are only required to deal with structured data so SQL is a clear choice.\\nPostgreSQL is a reliable and open source SQL database that scales very well.</p>\\n<h5><u>Backend - NodeJS</h5>\\n</u>\\n<p>NodeJS is just a good all-purpose language suited for our needs. It consists of\\nall the tools that we require to integrate with the other moving parts.</p>\\n<p>We will use Sequelize to connect with PostgreSQL and Express as our backend\\nframework. Since we are using GraphQL, we only need to serve a single route thus\\na minimalistic and unopinionated framework like express will be sufficient.</p>\\n<h5><u>Mobile - React Native</h5>\\n</u>\\n<p>React Native was selected to be the mobile presentation layer since we required\\na cross-platform mobile application. Our Driver and Customer mobile applications\\ndo not require any platform specific features so react native is a clear choice.</p>\\n<h5><u>Mobile - AsyncStorage</h5>\\n</u>\\n<p>AsyncStorage was chosen to be the mobile application local storege. AsyncStorage\\nis a simple key-value store, which will more than suffice for the small number\\nof information we are required to manage on the mobile application end.</p>\\n<h5><u>Desktop - Electron</h5>\\n</u>\\n<p>We chose Electron to be the Admin dashboard Front-end because we required a\\ndesktop application that could connect with our GraphQL backend. We did not\\nconsider building the admin dashboard as a web-app because:</p>\\n<ul>\\n<li>We did not wish to expose our admin platform on the web (insecure)</li>\\n<li>We needed a fast responsiveness and persistence (speed)</li>\\n</ul>\\n<h5><u>Desktop - NeDB</h5>\\n</u>\\n<p>NeDB is a NoSQL document store. It allows us to store the heavy-queries we\\nreceive from GraphQL straight into the local store as a json object. We can\\nupdate, read, and query the local database quickly using NeDB.</p>\\n<h3>Development Tools</h3>\\n<ul>\\n<li><a href=\\\"https://www.getpostman.com/postman\\\">Postman</a> - API development environment</li>\\n<li><a href=\\\"https://sqlectron.github.io/\\\">SQLectron</a> - SQL client supporting multiple DBs</li>\\n<li><a href=\\\"https://github.com/graphql/graphiql\\\">GraphiQL</a> - GraphQL IDE</li>\\n<li><a href=\\\"https://code.visualstudio.com/\\\">Visual Studio Code</a> - Best code editor. Made\\nfor Web/Javascript development</li>\\n<li><a href=\\\"https://typora.io/\\\">Typora</a> - Best Markdown editor</li>\\n</ul>\\n<h1>Miscellaneous</h1>\\n<h3>Meeting 1 Notes - 30 August 2017</h3>\\n<ul>\\n<li>noodle suppliers</li>\\n<li>needs a ecommerce platform that integrates with their accounting tool and\\nhopefully their delivery tool as well.</li>\\n<li>looking to expand to households (marketing)</li>\\n<li>average user is rather weak in using software, would prefer a mobile app.</li>\\n<li>Users always order same thing.</li>\\n<li>logo, softwares, invoice</li>\\n<li>Support up to 3 yrs about</li>\\n<li>manage tab</li>\\n<li>invoice upon order</li>\\n<li>Need an invoice</li>\\n</ul>\\n<h3>Meeting 2 Notes - 23 August 2017</h3>\\n<ul>\\n<li>require english and chinese language support on all 3 platforms</li>\\n<li>adviced them to deploy admin app as a native app with calls to server\\n(security, speed)</li>\\n<li>allow order cancellation before 12 midnight</li>\\n<li>figured out the import format for their accounting tool</li>\\n<li>require advanced search features on their order dashboard</li>\\n</ul>\\n<h3>Questions for Wu Li Hao</h3>\\n<ul>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" checked disabled> Invoice (for generation invoice template)</p>\\n</li>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" checked disabled> Logo (for design)</p>\\n</li>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" disabled> Products (and customization - noodle thickness)</p>\\n</li>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" checked disabled> How the product packaging looks (for merging with our design)</p>\\n</li>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" checked disabled> Onsite analysis of accounting software (for backend integration)</p>\\n</li>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" checked disabled> Onsite analysis of delivery software (to understand their delivery model)</p>\\n</li>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" checked disabled> Do drivers have a delivery list? (to understand delivery model)</p>\\n</li>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" checked disabled> When do you do accounting? By Day? Week? Month? (to understand accounting\\nmodel)</p>\\n</li>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" checked disabled> How much in advance must the customer book?</p>\\n</li>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" checked disabled> Do customers make repeat bookings?</p>\\n</li>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" checked disabled> Can customers cancel orders?</p>\\n</li>\\n</ul>\\n<p>â€‹</p>\",\"frontmatter\":{\"date\":\"December 23, 2017\",\"path\":\"WuLiHao\",\"title\":\"Wu Li Hao Project\"}}},\"pathContext\":{\"id\":\"WuLiHao\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/blog-wu-li-hao.json\n// module id = 603\n// module chunks = 210618213037549"],"sourceRoot":""}
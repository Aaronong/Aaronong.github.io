{"version":3,"sources":["webpack:///path---blog-relational-programming-language-b3afa60d5703977a55b8.js","webpack:///./.cache/json/blog-relational-programming-language.json"],"names":["webpackJsonp","593","module","exports","data","markdownRemark","excerpt","html","frontmatter","date","path","title","pathContext","id"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,QAAA,8PAAAC,KAAA;AAAumgEC,aAAwIC,KAAA,iBAAAC,KAAA,kCAAAC,MAAA,qCAA6GC,aAAgBC,GAAA","file":"path---blog-relational-programming-language-b3afa60d5703977a55b8.js","sourcesContent":["webpackJsonp([33328253871787],{\n\n/***/ 593:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"excerpt\":\"Creating a domain specific language to support relational algebra. Outline In this  project , I extended the sPL\\nlanguage to include support for relational algebra. I also repurposed the ePL\\ninterpreter to handle interpreted execution of all of theâ€¦\",\"html\":\"<p>Creating a domain specific language to support relational algebra.</p>\\n<h4>Outline</h4>\\n<p>In this <a href=\\\"https://github.com/Aaronong/RelationalPL\\\">project</a>, I extended the sPL\\nlanguage to include support for relational algebra. I also repurposed the ePL\\ninterpreter to handle interpreted execution of all of the expressions available\\nin the extended sPL language.</p>\\n<h4>Approach</h4>\\n<p>I first approached the implementation project by defining the new types and\\nexpressions that I would require in the extended sPL language. These types and\\nexpressions then formed the basic backbone upon which the rest of the language\\nwould be built on. Hence, they had to be defined first.</p>\\n<p>Following the extension of the sPL language, I extended the parser, lexer, and\\ntokens to support the translation of *.spl files into the sPL language. Then, I\\nextended the type checker and type inference functions to ensure that the code\\nwritten in the *.spl files were compliant with the extended sPL language.</p>\\n<p>The development of the interpreter came last, after the full integration of the\\nother functions. Throughout the process, I employed test-driven development to\\ntest base cases before moving on to test more complex expressions. Positive test\\ncases were defined in relation1.spl through relation9.spl. Negative test cases\\nwere also defined in error1.spl through error5.spl to ensure that errors were\\nhandled appropriately.</p>\\n<h2>How to use</h2>\\n<h4>Compile binaries</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-powershell\\\"><code><span class=\\\"token punctuation\\\">.</span><span class=\\\"token operator\\\">/</span>bincomp6<span class=\\\"token punctuation\\\">.</span>sh\\n</code></pre>\\n      </div>\\n<h4>Interprete .spl files</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-powershell\\\"><code><span class=\\\"token punctuation\\\">.</span><span class=\\\"token operator\\\">/</span>test6<span class=\\\"token punctuation\\\">.</span>sh\\n</code></pre>\\n      </div>\\n<h4>Delete binaries and remove interpreted output files</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-powershell\\\"><code><span class=\\\"token punctuation\\\">.</span><span class=\\\"token operator\\\">/</span>clean<span class=\\\"token punctuation\\\">.</span>sh\\n</code></pre>\\n      </div>\\n<h2>Relation Support</h2>\\n<p>For the DSL implementation project I extended the sPL language to include\\nsupport for relations.</p>\\n<h4>Design Choices</h4>\\n<ul>\\n<li>Rows were defined as a sPL_expr to facilitate extensions to support row\\nselection, insertion and deletion should I choose to implement those\\nfunctions.</li>\\n<li>Projections were defined as a type to facilitate the processing of the\\nprojection operator. The projection operator was defined as a binary operator\\nthat operates on a left Relation and a right Projection.</li>\\n<li>ProjectionType was included to support type checking and type infererence of\\nProjection expressions.</li>\\n<li>Rows were treated as RelationType expressions.</li>\\n</ul>\\n<h4>Extended sPL_type</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ocaml\\\"><code><span class=\\\"token keyword\\\">type</span> sPL<span class=\\\"token punctuation\\\">_</span>type <span class=\\\"token operator\\\">=</span>\\n  <span class=\\\"token operator\\\">|</span> BoolType\\n  <span class=\\\"token operator\\\">|</span> IntType\\n  <span class=\\\"token operator\\\">|</span> Arrow <span class=\\\"token keyword\\\">of</span> sPL<span class=\\\"token punctuation\\\">_</span>type <span class=\\\"token operator\\\">*</span> sPL<span class=\\\"token punctuation\\\">_</span>type\\n  <span class=\\\"token comment\\\">(* NEW *)</span>\\n  <span class=\\\"token operator\\\">|</span> RelationType <span class=\\\"token keyword\\\">of</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>id <span class=\\\"token operator\\\">*</span> sPL<span class=\\\"token punctuation\\\">_</span>type<span class=\\\"token punctuation\\\">)</span> list<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token operator\\\">|</span> ProjType\\n</code></pre>\\n      </div>\\n<h4>Extended sPL_expr</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ocaml\\\"><code><span class=\\\"token keyword\\\">type</span> sPL<span class=\\\"token punctuation\\\">_</span>expr <span class=\\\"token operator\\\">=</span>\\n  <span class=\\\"token operator\\\">|</span> BoolConst <span class=\\\"token keyword\\\">of</span> bool\\n  <span class=\\\"token operator\\\">|</span> IntConst <span class=\\\"token keyword\\\">of</span> int\\n  <span class=\\\"token operator\\\">|</span> Var <span class=\\\"token keyword\\\">of</span> id\\n  <span class=\\\"token operator\\\">|</span> UnaryPrimApp <span class=\\\"token keyword\\\">of</span> op<span class=\\\"token punctuation\\\">_</span>id <span class=\\\"token operator\\\">*</span> sPL<span class=\\\"token punctuation\\\">_</span>expr\\n  <span class=\\\"token operator\\\">|</span> BinaryPrimApp <span class=\\\"token keyword\\\">of</span> op<span class=\\\"token punctuation\\\">_</span>id <span class=\\\"token operator\\\">*</span> sPL<span class=\\\"token punctuation\\\">_</span>expr <span class=\\\"token operator\\\">*</span> sPL<span class=\\\"token punctuation\\\">_</span>expr\\n  <span class=\\\"token operator\\\">|</span> Cond <span class=\\\"token keyword\\\">of</span> sPL<span class=\\\"token punctuation\\\">_</span>expr <span class=\\\"token operator\\\">*</span> sPL<span class=\\\"token punctuation\\\">_</span>expr <span class=\\\"token operator\\\">*</span> sPL<span class=\\\"token punctuation\\\">_</span>expr\\n  <span class=\\\"token operator\\\">|</span> Func <span class=\\\"token keyword\\\">of</span> sPL<span class=\\\"token punctuation\\\">_</span>type <span class=\\\"token operator\\\">*</span> <span class=\\\"token punctuation\\\">(</span>id list<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> sPL<span class=\\\"token punctuation\\\">_</span>expr\\n  <span class=\\\"token operator\\\">|</span> RecFunc <span class=\\\"token keyword\\\">of</span> sPL<span class=\\\"token punctuation\\\">_</span>type <span class=\\\"token operator\\\">*</span> id <span class=\\\"token operator\\\">*</span> <span class=\\\"token punctuation\\\">(</span>id list<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> sPL<span class=\\\"token punctuation\\\">_</span>expr\\n  <span class=\\\"token operator\\\">|</span> Appln <span class=\\\"token keyword\\\">of</span> sPL<span class=\\\"token punctuation\\\">_</span>expr <span class=\\\"token operator\\\">*</span> sPL<span class=\\\"token punctuation\\\">_</span>type option <span class=\\\"token operator\\\">*</span> <span class=\\\"token punctuation\\\">(</span>sPL<span class=\\\"token punctuation\\\">_</span>expr list<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token operator\\\">|</span> Let <span class=\\\"token keyword\\\">of</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>sPL<span class=\\\"token punctuation\\\">_</span>type <span class=\\\"token operator\\\">*</span> id <span class=\\\"token operator\\\">*</span> sPL<span class=\\\"token punctuation\\\">_</span>expr<span class=\\\"token punctuation\\\">)</span> list<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> sPL<span class=\\\"token punctuation\\\">_</span>type <span class=\\\"token operator\\\">*</span> sPL<span class=\\\"token punctuation\\\">_</span>expr\\n  <span class=\\\"token comment\\\">(* NEW *)</span>\\n  <span class=\\\"token operator\\\">|</span> Row <span class=\\\"token keyword\\\">of</span> sPL<span class=\\\"token punctuation\\\">_</span>expr list\\n  <span class=\\\"token operator\\\">|</span> Relation <span class=\\\"token keyword\\\">of</span> sPL<span class=\\\"token punctuation\\\">_</span>type <span class=\\\"token operator\\\">*</span> <span class=\\\"token punctuation\\\">(</span>sPL<span class=\\\"token punctuation\\\">_</span>expr list<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token operator\\\">|</span> Proj <span class=\\\"token keyword\\\">of</span> id list\\n</code></pre>\\n      </div>\\n<h2>Syntax for Relations</h2>\\n<p>The relation syntax mainly follows the style guidelines provided by the project\\ninstruction.</p>\\n<h4>Row type - taken from relation1.spl</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code>row <span class=\\\"token number\\\">23</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">;</span> end\\n</code></pre>\\n      </div>\\n<h4>Relation type - taken from relation2.spl</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code>relation <span class=\\\"token punctuation\\\">{</span>relationtype id<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">;</span> age<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">;</span> end<span class=\\\"token punctuation\\\">}</span>\\n\\trow <span class=\\\"token number\\\">33</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">6</span><span class=\\\"token punctuation\\\">;</span> end\\n\\trow <span class=\\\"token number\\\">54</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">4</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span> end\\nend\\n</code></pre>\\n      </div>\\n<h4>Join syntax - taken from relation4.spl</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code>relation <span class=\\\"token punctuation\\\">{</span>relationtype id<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">;</span> age<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">;</span> is_male<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> end<span class=\\\"token punctuation\\\">}</span>\\n\\trow <span class=\\\"token number\\\">33</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">4</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span> true<span class=\\\"token punctuation\\\">;</span> end\\n\\trow <span class=\\\"token number\\\">54</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span> false<span class=\\\"token punctuation\\\">;</span> end\\n\\trow <span class=\\\"token number\\\">23</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">;</span> end\\n\\trow <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">2</span><span class=\\\"token operator\\\">*</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">45</span><span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">45</span><span class=\\\"token punctuation\\\">;</span> end\\nend\\n\\n<span class=\\\"token operator\\\">|</span><span class=\\\"token operator\\\">></span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">|</span>\\n\\nrelation <span class=\\\"token punctuation\\\">{</span>relationtype id<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">;</span> is_student<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> is_tall<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> end<span class=\\\"token punctuation\\\">}</span>\\n\\trow <span class=\\\"token number\\\">33</span><span class=\\\"token punctuation\\\">;</span> true<span class=\\\"token punctuation\\\">;</span> false<span class=\\\"token punctuation\\\">;</span> end\\n\\trow <span class=\\\"token number\\\">54</span><span class=\\\"token punctuation\\\">;</span> true<span class=\\\"token punctuation\\\">;</span> true<span class=\\\"token punctuation\\\">;</span> end\\nend\\n</code></pre>\\n      </div>\\n<h4>Projection type - excerpted from relation7.spl</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code>projection <span class=\\\"token punctuation\\\">(</span>id is_student<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<h4>Projection syntax - taken from relation5.spl</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code>relation <span class=\\\"token punctuation\\\">{</span>relationtype id<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">;</span> age<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">;</span> is_male<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> end<span class=\\\"token punctuation\\\">}</span>\\n\\trow <span class=\\\"token number\\\">33</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">4</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span> true<span class=\\\"token punctuation\\\">;</span> end\\n\\trow <span class=\\\"token number\\\">54</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span> false<span class=\\\"token punctuation\\\">;</span> end\\n\\trow <span class=\\\"token number\\\">23</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">;</span> end\\n\\trow <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">2</span><span class=\\\"token operator\\\">*</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">45</span><span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">45</span><span class=\\\"token punctuation\\\">;</span> end\\n\\trow <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">65</span><span class=\\\"token punctuation\\\">;</span> true<span class=\\\"token punctuation\\\">;</span> end\\nend\\n\\n<span class=\\\"token operator\\\">||</span><span class=\\\"token operator\\\">|</span>\\n\\nprojection <span class=\\\"token punctuation\\\">(</span>id is_male<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<h2>Tokens and Lexer</h2>\\n<p>Defined new tokens and extended the lexer to support the parsing of relations.</p>\\n<h4>Tokens</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ocaml\\\"><code><span class=\\\"token keyword\\\">type</span> sPL<span class=\\\"token punctuation\\\">_</span>token <span class=\\\"token operator\\\">=</span>\\n  <span class=\\\"token operator\\\">|</span> IDENTIFIER <span class=\\\"token keyword\\\">of</span> string\\n  <span class=\\\"token operator\\\">|</span> INT<span class=\\\"token punctuation\\\">_</span>LIT <span class=\\\"token keyword\\\">of</span> int <span class=\\\"token operator\\\">*</span> string\\n  <span class=\\\"token operator\\\">|</span> CHAR<span class=\\\"token punctuation\\\">_</span>LIT <span class=\\\"token keyword\\\">of</span> char <span class=\\\"token operator\\\">*</span> string\\n  <span class=\\\"token operator\\\">|</span> STRING <span class=\\\"token keyword\\\">of</span> string <span class=\\\"token operator\\\">*</span> string\\n  <span class=\\\"token operator\\\">|</span> TRUE <span class=\\\"token operator\\\">|</span> FALSE\\n  <span class=\\\"token operator\\\">|</span> INT<span class=\\\"token punctuation\\\">_</span>TYP <span class=\\\"token operator\\\">|</span> BOOL<span class=\\\"token punctuation\\\">_</span>TYP\\n  <span class=\\\"token operator\\\">|</span> PLUS <span class=\\\"token operator\\\">|</span> UMINUS <span class=\\\"token operator\\\">|</span> MINUS <span class=\\\"token operator\\\">|</span> STAR <span class=\\\"token operator\\\">|</span> DIV\\n  <span class=\\\"token operator\\\">|</span> EQ <span class=\\\"token operator\\\">|</span> LT <span class=\\\"token operator\\\">|</span> GT\\n  <span class=\\\"token operator\\\">|</span> AND <span class=\\\"token operator\\\">|</span> OR <span class=\\\"token operator\\\">|</span> NEG\\n  <span class=\\\"token operator\\\">|</span> LETWORD <span class=\\\"token operator\\\">|</span> INWORD <span class=\\\"token operator\\\">|</span> ENDWORD\\n  <span class=\\\"token operator\\\">|</span> FUN <span class=\\\"token operator\\\">|</span> RECFUN <span class=\\\"token operator\\\">|</span> RARROW\\n  <span class=\\\"token operator\\\">|</span> OPAREN <span class=\\\"token operator\\\">|</span> CPAREN\\n  <span class=\\\"token operator\\\">|</span> OBRACE <span class=\\\"token operator\\\">|</span> CBRACE\\n  <span class=\\\"token operator\\\">|</span> IFWORD <span class=\\\"token operator\\\">|</span> THENWORD <span class=\\\"token operator\\\">|</span> ELSEWORD\\n  <span class=\\\"token comment\\\">(* NEW *)</span>\\n  <span class=\\\"token operator\\\">|</span> EOF <span class=\\\"token operator\\\">|</span> RELATIONWORD <span class=\\\"token operator\\\">|</span> ROWWORD\\n  <span class=\\\"token operator\\\">|</span> RELATION<span class=\\\"token punctuation\\\">_</span>TYP <span class=\\\"token operator\\\">|</span> COLON <span class=\\\"token operator\\\">|</span> SEMICOLON\\n  <span class=\\\"token operator\\\">|</span> JOIN <span class=\\\"token operator\\\">|</span> PROJECT <span class=\\\"token operator\\\">|</span> PROJWORD <span class=\\\"token operator\\\">|</span> PROJ<span class=\\\"token punctuation\\\">_</span>TYP\\n</code></pre>\\n      </div>\\n<h4>Lexer - keywords</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ocaml\\\"><code> <span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">_</span> <span class=\\\"token operator\\\">=</span> List<span class=\\\"token punctuation\\\">.</span>map <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">fun</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>k<span class=\\\"token punctuation\\\">,</span>t<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">(</span>string<span class=\\\"token operator\\\">*</span>sPL<span class=\\\"token punctuation\\\">_</span>token<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-></span> Hashtbl<span class=\\\"token punctuation\\\">.</span>add sPL<span class=\\\"token punctuation\\\">_</span>keywords k t<span class=\\\"token punctuation\\\">)</span>\\n\\t<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"int\\\"</span><span class=\\\"token punctuation\\\">,</span> INT<span class=\\\"token punctuation\\\">_</span>TYP<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n   <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"bool\\\"</span><span class=\\\"token punctuation\\\">,</span> BOOL<span class=\\\"token punctuation\\\">_</span>TYP<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n   <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"true\\\"</span><span class=\\\"token punctuation\\\">,</span> TRUE<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n   <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"false\\\"</span><span class=\\\"token punctuation\\\">,</span> FALSE<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n   <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"let\\\"</span><span class=\\\"token punctuation\\\">,</span> LETWORD<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"in\\\"</span><span class=\\\"token punctuation\\\">,</span> INWORD<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"end\\\"</span><span class=\\\"token punctuation\\\">,</span> ENDWORD<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n   <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"fun\\\"</span><span class=\\\"token punctuation\\\">,</span> FUN<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n   <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"recfun\\\"</span><span class=\\\"token punctuation\\\">,</span> RECFUN<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n   <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"if\\\"</span> <span class=\\\"token punctuation\\\">,</span> IFWORD<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n   <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"then\\\"</span><span class=\\\"token punctuation\\\">,</span> THENWORD<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n   <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"else\\\"</span><span class=\\\"token punctuation\\\">,</span> ELSEWORD<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n   <span class=\\\"token comment\\\">(* NEW *)</span>\\n   <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"relation\\\"</span><span class=\\\"token punctuation\\\">,</span> RELATIONWORD<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n   <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"row\\\"</span><span class=\\\"token punctuation\\\">,</span> ROWWORD<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n   <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"relationtype\\\"</span><span class=\\\"token punctuation\\\">,</span> RELATION<span class=\\\"token punctuation\\\">_</span>TYP<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n   <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"projection\\\"</span><span class=\\\"token punctuation\\\">,</span> PROJWORD<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n   <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"projectiontype\\\"</span><span class=\\\"token punctuation\\\">,</span> PROJ<span class=\\\"token punctuation\\\">_</span>TYP<span class=\\\"token punctuation\\\">)</span>\\n <span class=\\\"token punctuation\\\">]</span>\\n</code></pre>\\n      </div>\\n<h4>Lexer - operators</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ocaml\\\"><code>  <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">'+'</span> <span class=\\\"token punctuation\\\">{</span>PLUS<span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">'-'</span> <span class=\\\"token punctuation\\\">{</span>MINUS<span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">'~'</span> <span class=\\\"token punctuation\\\">{</span>UMINUS<span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">'*'</span> <span class=\\\"token punctuation\\\">{</span>STAR<span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">'/'</span> <span class=\\\"token punctuation\\\">{</span>DIV<span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">'='</span> <span class=\\\"token punctuation\\\">{</span>EQ<span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">'&lt;'</span> <span class=\\\"token punctuation\\\">{</span>LT<span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">'>'</span> <span class=\\\"token punctuation\\\">{</span>GT<span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">'&amp;'</span> <span class=\\\"token punctuation\\\">{</span>AND<span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">'|'</span> <span class=\\\"token punctuation\\\">{</span>OR<span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">'\\\\\\\\'</span> <span class=\\\"token punctuation\\\">{</span>NEG<span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">\\\"->\\\"</span> <span class=\\\"token punctuation\\\">{</span>RARROW<span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token comment\\\">(* NEW *)</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">'('</span> <span class=\\\"token punctuation\\\">{</span>OPAREN<span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">')'</span> <span class=\\\"token punctuation\\\">{</span>CPAREN<span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">'{'</span> <span class=\\\"token punctuation\\\">{</span>OBRACE<span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">'}'</span> <span class=\\\"token punctuation\\\">{</span>CBRACE<span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">':'</span> <span class=\\\"token punctuation\\\">{</span>COLON<span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">';'</span> <span class=\\\"token punctuation\\\">{</span>SEMICOLON<span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">\\\"|>&lt;|\\\"</span> <span class=\\\"token punctuation\\\">{</span>JOIN<span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">\\\"|||\\\"</span> <span class=\\\"token punctuation\\\">{</span>PROJECT<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>Parser</h2>\\n<p>Extended parser to support relations.</p>\\n<h4>Supporting Parser Elements</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ocaml\\\"><code>  args<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">[</span> al <span class=\\\"token operator\\\">=</span> LIST1 <span class=\\\"token punctuation\\\">[</span><span class=\\\"token type variable\\\">`IDENTIFIER</span> s <span class=\\\"token operator\\\">-></span> s<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">-></span> al <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  decl<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token type variable\\\">`OBRACE</span><span class=\\\"token punctuation\\\">;</span>t<span class=\\\"token operator\\\">=</span>typ<span class=\\\"token punctuation\\\">;</span><span class=\\\"token type variable\\\">`CBRACE</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token type variable\\\">`IDENTIFIER</span> s<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token type variable\\\">`EQ</span><span class=\\\"token punctuation\\\">;</span> e <span class=\\\"token operator\\\">=</span> expr <span class=\\\"token operator\\\">-></span> <span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token punctuation\\\">,</span>s<span class=\\\"token punctuation\\\">,</span>e<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  ldecl<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">[</span>ld <span class=\\\"token operator\\\">=</span> LIST1 decl <span class=\\\"token operator\\\">-></span> ld<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\">(* NEW *)</span>\\n  tup<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token type variable\\\">`IDENTIFIER</span> s<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token type variable\\\">`COLON</span><span class=\\\"token punctuation\\\">;</span> t<span class=\\\"token operator\\\">=</span>typ<span class=\\\"token punctuation\\\">;</span><span class=\\\"token type variable\\\">`SEMICOLON</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">,</span>t<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  elem<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">[</span>e<span class=\\\"token operator\\\">=</span>expr<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token type variable\\\">`SEMICOLON</span> <span class=\\\"token operator\\\">-></span> e <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h4>Type Parser</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ocaml\\\"><code>  typ<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token type variable\\\">`BOOL_TYP</span> <span class=\\\"token operator\\\">-></span> BoolType\\n        <span class=\\\"token operator\\\">|</span> <span class=\\\"token type variable\\\">`INT_TYP</span> <span class=\\\"token operator\\\">-></span> IntType<span class=\\\"token punctuation\\\">]</span>\\n        <span class=\\\"token operator\\\">|</span> RIGHTA\\n          <span class=\\\"token punctuation\\\">[</span>t1<span class=\\\"token operator\\\">=</span>SELF<span class=\\\"token punctuation\\\">;</span><span class=\\\"token type variable\\\">`RARROW</span><span class=\\\"token punctuation\\\">;</span>t2<span class=\\\"token operator\\\">=</span>SELF <span class=\\\"token operator\\\">-></span> Arrow<span class=\\\"token punctuation\\\">(</span>t1<span class=\\\"token punctuation\\\">,</span>t2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">]</span>\\n        <span class=\\\"token operator\\\">|</span> <span class=\\\"token punctuation\\\">[</span>peek<span class=\\\"token punctuation\\\">_</span>typ<span class=\\\"token punctuation\\\">;</span><span class=\\\"token type variable\\\">`OPAREN</span><span class=\\\"token punctuation\\\">;</span>t<span class=\\\"token operator\\\">=</span>SELF<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token type variable\\\">`CPAREN</span> <span class=\\\"token operator\\\">-></span> t\\n        <span class=\\\"token comment\\\">(* NEW *)</span>\\n        <span class=\\\"token operator\\\">|</span> <span class=\\\"token type variable\\\">`RELATION_TYP</span><span class=\\\"token punctuation\\\">;</span> tuples <span class=\\\"token operator\\\">=</span> LIST1 tup<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token type variable\\\">`ENDWORD</span> <span class=\\\"token operator\\\">-></span> RelationType <span class=\\\"token punctuation\\\">(</span>tuples<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token operator\\\">|</span> <span class=\\\"token type variable\\\">`PROJ_TYP</span> <span class=\\\"token operator\\\">-></span> ProjType\\n  <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h4>Expression Parser - truncated for ease of view</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ocaml\\\"><code>  expr<span class=\\\"token punctuation\\\">:</span>\\n     <span class=\\\"token punctuation\\\">[</span>\\n      <span class=\\\"token comment\\\">(* New *)</span>\\n      <span class=\\\"token string\\\">\\\"Relation\\\"</span> NONA\\n          <span class=\\\"token punctuation\\\">[</span> <span class=\\\"token type variable\\\">`ROWWORD</span><span class=\\\"token punctuation\\\">;</span> e <span class=\\\"token operator\\\">=</span> LIST1 elem<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token type variable\\\">`ENDWORD</span> <span class=\\\"token operator\\\">-></span> Row<span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span>\\n          <span class=\\\"token operator\\\">|</span> <span class=\\\"token type variable\\\">`RELATIONWORD</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token type variable\\\">`OBRACE</span><span class=\\\"token punctuation\\\">;</span> t <span class=\\\"token operator\\\">=</span> typ<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token type variable\\\">`CBRACE</span><span class=\\\"token punctuation\\\">;</span> r <span class=\\\"token operator\\\">=</span> LIST1 SELF<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token type variable\\\">`ENDWORD</span> <span class=\\\"token operator\\\">-></span> Relation<span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token punctuation\\\">,</span>r<span class=\\\"token punctuation\\\">)</span>\\n          <span class=\\\"token operator\\\">|</span> <span class=\\\"token type variable\\\">`PROJWORD</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token type variable\\\">`OPAREN</span><span class=\\\"token punctuation\\\">;</span> al <span class=\\\"token operator\\\">=</span> args<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token type variable\\\">`CPAREN</span> <span class=\\\"token operator\\\">-></span> Proj<span class=\\\"token punctuation\\\">(</span>al<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">]</span>\\n      <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">\\\"Join Project\\\"</span> LEFTA\\n          <span class=\\\"token punctuation\\\">[</span> e1 <span class=\\\"token operator\\\">=</span> SELF<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token type variable\\\">`JOIN</span><span class=\\\"token punctuation\\\">;</span> e2 <span class=\\\"token operator\\\">=</span> SELF <span class=\\\"token operator\\\">-></span> BinaryPrimApp <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"|>&lt;|\\\"</span><span class=\\\"token punctuation\\\">,</span>e1<span class=\\\"token punctuation\\\">,</span>e2<span class=\\\"token punctuation\\\">)</span>\\n          <span class=\\\"token operator\\\">|</span> e1 <span class=\\\"token operator\\\">=</span> SELF<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token type variable\\\">`PROJECT</span><span class=\\\"token punctuation\\\">;</span> e2 <span class=\\\"token operator\\\">=</span> SELF <span class=\\\"token operator\\\">-></span> BinaryPrimApp <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"|||\\\"</span><span class=\\\"token punctuation\\\">,</span>e1<span class=\\\"token punctuation\\\">,</span>e2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">]</span>\\n          <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>\\n          <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>\\n          <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>\\n      <span class=\\\"token punctuation\\\">]</span>\\n</code></pre>\\n      </div>\\n<h2>Discussion of type checking and type inference</h2>\\n<p>The code from here on out is far too lengthy and complicated, hence it will no\\nlonger be purposeful to include the code snippets in this document. I shall\\napproach the rest of the document mainly through prosaic discourse. Code\\nsnippets are only included where relevant to discussion.</p>\\n<h4>Type Checking - Types</h4>\\n<ul>\\n<li>Relation - Check type given against the type of all rows in the relation</li>\\n<li>Row - Check type of each element in a row against the type inherited from the\\nrelation</li>\\n<li>Projection - Check that it is of ProjectionType</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ocaml\\\"><code>      <span class=\\\"token operator\\\">|</span> Row row<span class=\\\"token punctuation\\\">_</span>content <span class=\\\"token operator\\\">-></span>\\n          <span class=\\\"token keyword\\\">begin</span>\\n            <span class=\\\"token keyword\\\">match</span> t <span class=\\\"token keyword\\\">with</span>\\n              <span class=\\\"token operator\\\">|</span> RelationType <span class=\\\"token punctuation\\\">(</span>type<span class=\\\"token punctuation\\\">_</span>tuples<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-></span>\\n                  <span class=\\\"token keyword\\\">begin</span>\\n                    <span class=\\\"token keyword\\\">let</span> row<span class=\\\"token punctuation\\\">_</span>type <span class=\\\"token operator\\\">=</span> List<span class=\\\"token punctuation\\\">.</span>map2 <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">fun</span> <span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">,</span>t<span class=\\\"token punctuation\\\">)</span> e <span class=\\\"token operator\\\">-></span> <span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">,</span>t<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> type<span class=\\\"token punctuation\\\">_</span>tuples row<span class=\\\"token punctuation\\\">_</span>content <span class=\\\"token keyword\\\">in</span>\\n                    List<span class=\\\"token punctuation\\\">.</span>for<span class=\\\"token punctuation\\\">_</span>all <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">fun</span> <span class=\\\"token punctuation\\\">(</span>ea<span class=\\\"token punctuation\\\">,</span>ta<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-></span> aux env ea ta<span class=\\\"token punctuation\\\">)</span> row<span class=\\\"token punctuation\\\">_</span>type\\n                  <span class=\\\"token keyword\\\">end</span>\\n              <span class=\\\"token operator\\\">|</span> <span class=\\\"token punctuation\\\">_</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token boolean\\\">false</span>\\n          <span class=\\\"token keyword\\\">end</span>\\n\\n      <span class=\\\"token operator\\\">|</span> Relation <span class=\\\"token punctuation\\\">(</span>t1<span class=\\\"token punctuation\\\">,</span> rows<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-></span>\\n          <span class=\\\"token keyword\\\">if</span> t1 <span class=\\\"token operator\\\">=</span> t <span class=\\\"token keyword\\\">then</span>\\n            <span class=\\\"token keyword\\\">let</span> row<span class=\\\"token punctuation\\\">_</span>verify <span class=\\\"token operator\\\">=</span> List<span class=\\\"token punctuation\\\">.</span>rev<span class=\\\"token punctuation\\\">_</span>map <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">fun</span> row <span class=\\\"token operator\\\">-></span> aux env row t<span class=\\\"token punctuation\\\">)</span> rows <span class=\\\"token keyword\\\">in</span>\\n            List<span class=\\\"token punctuation\\\">.</span>fold<span class=\\\"token punctuation\\\">_</span>left <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">fun</span> a b <span class=\\\"token operator\\\">-></span> a <span class=\\\"token operator\\\">&amp;&amp;</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token boolean\\\">true</span> row<span class=\\\"token punctuation\\\">_</span>verify\\n          <span class=\\\"token keyword\\\">else</span> <span class=\\\"token boolean\\\">false</span>\\n      <span class=\\\"token operator\\\">|</span> Proj <span class=\\\"token punctuation\\\">_</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token keyword\\\">if</span> t<span class=\\\"token operator\\\">=</span>ProjType <span class=\\\"token keyword\\\">then</span> <span class=\\\"token boolean\\\">true</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token boolean\\\">false</span>\\n</code></pre>\\n      </div>\\n<h4>Type Checking - Operators</h4>\\n<ul>\\n<li>Join Operator - Check that both arguments on either side are relations</li>\\n<li>Projection Operator - Check that the left argument is a relation and the right\\nargument is a Projection</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ocaml\\\"><code>              <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">\\\"|>&lt;|\\\"</span><span class=\\\"token punctuation\\\">,</span>RelationType<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">_</span><span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token operator\\\">-></span>\\n                  <span class=\\\"token keyword\\\">begin</span>\\n                    <span class=\\\"token keyword\\\">match</span> arg1<span class=\\\"token punctuation\\\">,</span>arg2 <span class=\\\"token keyword\\\">with</span>\\n                      <span class=\\\"token operator\\\">|</span> Relation<span class=\\\"token punctuation\\\">(</span>t1<span class=\\\"token punctuation\\\">,</span>e1<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> Relation<span class=\\\"token punctuation\\\">(</span>t2<span class=\\\"token punctuation\\\">,</span>e2<span class=\\\"token punctuation\\\">)</span>\\n                        <span class=\\\"token operator\\\">-></span> <span class=\\\"token punctuation\\\">(</span>aux env arg1 t1<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token punctuation\\\">(</span>aux env arg2 t2<span class=\\\"token punctuation\\\">)</span>\\n                      <span class=\\\"token operator\\\">|</span> <span class=\\\"token punctuation\\\">_</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">_</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token boolean\\\">false</span>\\n                  <span class=\\\"token keyword\\\">end</span>\\n              <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">\\\"|||\\\"</span><span class=\\\"token punctuation\\\">,</span>RelationType<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">_</span><span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token operator\\\">-></span>\\n                  <span class=\\\"token keyword\\\">begin</span>\\n                    <span class=\\\"token keyword\\\">match</span> arg1<span class=\\\"token punctuation\\\">,</span>arg2 <span class=\\\"token keyword\\\">with</span>\\n                      <span class=\\\"token operator\\\">|</span> Relation<span class=\\\"token punctuation\\\">(</span>RelationType<span class=\\\"token punctuation\\\">(</span>l1<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>e1<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> Proj projections\\n                        <span class=\\\"token operator\\\">-></span> <span class=\\\"token punctuation\\\">(</span>aux env arg1 <span class=\\\"token punctuation\\\">(</span>RelationType<span class=\\\"token punctuation\\\">(</span>l1<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&amp;&amp;</span> List<span class=\\\"token punctuation\\\">.</span>for<span class=\\\"token punctuation\\\">_</span>all <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">fun</span> x <span class=\\\"token operator\\\">-></span> List<span class=\\\"token punctuation\\\">.</span>exists \\t\\t\\t\\t\\t\\t\\t\\t<span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">fun</span> <span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">,</span>t<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-></span> id <span class=\\\"token operator\\\">=</span> x<span class=\\\"token punctuation\\\">)</span> l1<span class=\\\"token punctuation\\\">)</span> projections\\n                      <span class=\\\"token operator\\\">|</span> <span class=\\\"token punctuation\\\">_</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">_</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token boolean\\\">false</span>\\n                  <span class=\\\"token keyword\\\">end</span>\\n</code></pre>\\n      </div>\\n<h4>Type Inference</h4>\\n<ul>\\n<li>Rows were inferred to be of type RelationType but with placeholder values in\\neach tag.</li>\\n<li>Relations had its type inferred based on the the type of its rows.</li>\\n<li>Projections were inferred to be ProjectionType.</li>\\n<li>Join and Projection operators inferred the type of the Relation that is the\\nresult of the operation.</li>\\n</ul>\\n<h2>Interpreter</h2>\\n<p>The developed interpreter is able to interpret all expressions available to the\\nextended sPL language. This can be observed through the output files generated\\nby the full testing suite test6.sh.</p>\\n<h4>Complex interpretation capabilities</h4>\\n<p>The output of relation6.spl and relation9.spl display the interpreter's ability\\nto handle let constructs, functions, and function applications.</p>\\n<h6>Relation6.spl</h6>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ocaml\\\"><code><span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">{</span>relationtype id<span class=\\\"token punctuation\\\">:</span> int<span class=\\\"token punctuation\\\">;</span> age<span class=\\\"token punctuation\\\">:</span> int<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>male<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span><span class=\\\"token punctuation\\\">}</span> r <span class=\\\"token operator\\\">=</span> relation <span class=\\\"token punctuation\\\">{</span>relationtype id<span class=\\\"token punctuation\\\">:</span> int<span class=\\\"token punctuation\\\">;</span> age<span class=\\\"token punctuation\\\">:</span> int<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>male<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span><span class=\\\"token punctuation\\\">}</span>\\n\\trow <span class=\\\"token number\\\">33</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">4</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span>\\n\\trow <span class=\\\"token number\\\">54</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span>\\n\\trow <span class=\\\"token number\\\">23</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span>\\n\\trow <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">2</span><span class=\\\"token operator\\\">*</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">45</span><span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">45</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span>\\n<span class=\\\"token keyword\\\">end</span> <span class=\\\"token keyword\\\">in</span> <span class=\\\"token punctuation\\\">{</span>relationtype id<span class=\\\"token punctuation\\\">:</span> int<span class=\\\"token punctuation\\\">;</span> age<span class=\\\"token punctuation\\\">:</span> int<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>male<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>student<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>tall<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span><span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">{</span>relationtype id<span class=\\\"token punctuation\\\">:</span> int<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>student<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>tall<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span><span class=\\\"token punctuation\\\">}</span> s <span class=\\\"token operator\\\">=</span> relation <span class=\\\"token punctuation\\\">{</span>relationtype id<span class=\\\"token punctuation\\\">:</span> int<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>student<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>tall<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span><span class=\\\"token punctuation\\\">}</span>\\n\\trow <span class=\\\"token number\\\">33</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span>\\n\\trow <span class=\\\"token number\\\">54</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span>\\n<span class=\\\"token keyword\\\">end</span> <span class=\\\"token keyword\\\">in</span>\\n\\n<span class=\\\"token punctuation\\\">{</span>relationtype id<span class=\\\"token punctuation\\\">:</span> int<span class=\\\"token punctuation\\\">;</span> age<span class=\\\"token punctuation\\\">:</span> int<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>male<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>student<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>tall<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span><span class=\\\"token punctuation\\\">}</span> r <span class=\\\"token operator\\\">|>&lt;|</span> s <span class=\\\"token keyword\\\">end</span> <span class=\\\"token keyword\\\">end</span>\\n</code></pre>\\n      </div>\\n<h6>Relation9.spl</h6>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ocaml\\\"><code><span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">{</span>int<span class=\\\"token punctuation\\\">}</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token keyword\\\">in</span> <span class=\\\"token punctuation\\\">{</span>relationtype id<span class=\\\"token punctuation\\\">:</span> int<span class=\\\"token punctuation\\\">;</span> age<span class=\\\"token punctuation\\\">:</span> int<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>male<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>student<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>tall<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span><span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">{</span>relationtype id<span class=\\\"token punctuation\\\">:</span> int<span class=\\\"token punctuation\\\">;</span> age<span class=\\\"token punctuation\\\">:</span> int<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>male<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span><span class=\\\"token punctuation\\\">}</span> r <span class=\\\"token operator\\\">=</span> relation <span class=\\\"token punctuation\\\">{</span>relationtype id<span class=\\\"token punctuation\\\">:</span> int<span class=\\\"token punctuation\\\">;</span> age<span class=\\\"token punctuation\\\">:</span> int<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>male<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span><span class=\\\"token punctuation\\\">}</span>\\n\\trow <span class=\\\"token number\\\">33</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">4</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span>\\n\\trow <span class=\\\"token number\\\">54</span><span class=\\\"token punctuation\\\">;</span> a<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span>\\n\\trow <span class=\\\"token number\\\">23</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span>\\n\\trow <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">2</span><span class=\\\"token operator\\\">*</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">45</span><span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">45</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span>\\n<span class=\\\"token keyword\\\">end</span> <span class=\\\"token keyword\\\">in</span> <span class=\\\"token punctuation\\\">{</span>relationtype id<span class=\\\"token punctuation\\\">:</span> int<span class=\\\"token punctuation\\\">;</span> age<span class=\\\"token punctuation\\\">:</span> int<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>male<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>student<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>tall<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span><span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">{</span>relationtype id<span class=\\\"token punctuation\\\">:</span> int<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>student<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>tall<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span><span class=\\\"token punctuation\\\">}</span> s <span class=\\\"token operator\\\">=</span> relation <span class=\\\"token punctuation\\\">{</span>relationtype id<span class=\\\"token punctuation\\\">:</span> int<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>student<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>tall<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span><span class=\\\"token punctuation\\\">}</span>\\n\\trow <span class=\\\"token number\\\">33</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span>\\n\\trow <span class=\\\"token number\\\">54</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span>\\n<span class=\\\"token keyword\\\">end</span> <span class=\\\"token keyword\\\">in</span>\\n\\n<span class=\\\"token punctuation\\\">{</span>relationtype id<span class=\\\"token punctuation\\\">:</span> int<span class=\\\"token punctuation\\\">;</span> age<span class=\\\"token punctuation\\\">:</span> int<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>male<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>student<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>tall<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span><span class=\\\"token punctuation\\\">}</span> r <span class=\\\"token operator\\\">|>&lt;|</span> s <span class=\\\"token keyword\\\">end</span> <span class=\\\"token keyword\\\">end</span> <span class=\\\"token keyword\\\">end</span>\\n</code></pre>\\n      </div>\\n<p>The output of relation7.spl and relation8.spl display the interpreter's ability\\nto handle sequential projection and join operations on relations.</p>\\n<h6>Relation7.spl</h6>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ocaml\\\"><code><span class=\\\"token punctuation\\\">(</span>\\nrelation <span class=\\\"token punctuation\\\">{</span>relationtype id<span class=\\\"token punctuation\\\">:</span> int<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>student<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>tall<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span><span class=\\\"token punctuation\\\">}</span>\\n\\trow <span class=\\\"token number\\\">33</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span>\\n\\trow <span class=\\\"token number\\\">54</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span>\\n<span class=\\\"token keyword\\\">end</span>\\n\\n<span class=\\\"token operator\\\">|||</span>\\n\\nprojection <span class=\\\"token punctuation\\\">(</span>id is<span class=\\\"token punctuation\\\">_</span>student<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token operator\\\">|||</span>\\n\\nprojection <span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<h6>Relation8.spl</h6>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ocaml\\\"><code><span class=\\\"token punctuation\\\">(</span>\\nrelation <span class=\\\"token punctuation\\\">{</span>relationtype id<span class=\\\"token punctuation\\\">:</span> int<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>student<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>tall<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span><span class=\\\"token punctuation\\\">}</span>\\n\\trow <span class=\\\"token number\\\">33</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span>\\n\\trow <span class=\\\"token number\\\">54</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span>\\n<span class=\\\"token keyword\\\">end</span>\\n\\n<span class=\\\"token operator\\\">|||</span>\\n\\nprojection <span class=\\\"token punctuation\\\">(</span>id is<span class=\\\"token punctuation\\\">_</span>student<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token operator\\\">|>&lt;|</span>\\n\\nrelation <span class=\\\"token punctuation\\\">{</span>relationtype id<span class=\\\"token punctuation\\\">:</span> int<span class=\\\"token punctuation\\\">;</span> age<span class=\\\"token punctuation\\\">:</span> int<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>male<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span><span class=\\\"token punctuation\\\">}</span>\\n\\trow <span class=\\\"token number\\\">33</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">4</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span>\\n\\trow <span class=\\\"token number\\\">54</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span>\\n\\trow <span class=\\\"token number\\\">23</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span>\\n\\trow <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">2</span><span class=\\\"token operator\\\">*</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">45</span><span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">45</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span>\\n<span class=\\\"token keyword\\\">end</span>\\n</code></pre>\\n      </div>\",\"frontmatter\":{\"date\":\"April 21, 2017\",\"path\":\"relational-programming-language\",\"title\":\"Relational Programming Language\"}}},\"pathContext\":{\"id\":\"relational-programming-language\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---blog-relational-programming-language-b3afa60d5703977a55b8.js","module.exports = {\"data\":{\"markdownRemark\":{\"excerpt\":\"Creating a domain specific language to support relational algebra. Outline In this  project , I extended the sPL\\nlanguage to include support for relational algebra. I also repurposed the ePL\\ninterpreter to handle interpreted execution of all of theâ€¦\",\"html\":\"<p>Creating a domain specific language to support relational algebra.</p>\\n<h4>Outline</h4>\\n<p>In this <a href=\\\"https://github.com/Aaronong/RelationalPL\\\">project</a>, I extended the sPL\\nlanguage to include support for relational algebra. I also repurposed the ePL\\ninterpreter to handle interpreted execution of all of the expressions available\\nin the extended sPL language.</p>\\n<h4>Approach</h4>\\n<p>I first approached the implementation project by defining the new types and\\nexpressions that I would require in the extended sPL language. These types and\\nexpressions then formed the basic backbone upon which the rest of the language\\nwould be built on. Hence, they had to be defined first.</p>\\n<p>Following the extension of the sPL language, I extended the parser, lexer, and\\ntokens to support the translation of *.spl files into the sPL language. Then, I\\nextended the type checker and type inference functions to ensure that the code\\nwritten in the *.spl files were compliant with the extended sPL language.</p>\\n<p>The development of the interpreter came last, after the full integration of the\\nother functions. Throughout the process, I employed test-driven development to\\ntest base cases before moving on to test more complex expressions. Positive test\\ncases were defined in relation1.spl through relation9.spl. Negative test cases\\nwere also defined in error1.spl through error5.spl to ensure that errors were\\nhandled appropriately.</p>\\n<h2>How to use</h2>\\n<h4>Compile binaries</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-powershell\\\"><code><span class=\\\"token punctuation\\\">.</span><span class=\\\"token operator\\\">/</span>bincomp6<span class=\\\"token punctuation\\\">.</span>sh\\n</code></pre>\\n      </div>\\n<h4>Interprete .spl files</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-powershell\\\"><code><span class=\\\"token punctuation\\\">.</span><span class=\\\"token operator\\\">/</span>test6<span class=\\\"token punctuation\\\">.</span>sh\\n</code></pre>\\n      </div>\\n<h4>Delete binaries and remove interpreted output files</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-powershell\\\"><code><span class=\\\"token punctuation\\\">.</span><span class=\\\"token operator\\\">/</span>clean<span class=\\\"token punctuation\\\">.</span>sh\\n</code></pre>\\n      </div>\\n<h2>Relation Support</h2>\\n<p>For the DSL implementation project I extended the sPL language to include\\nsupport for relations.</p>\\n<h4>Design Choices</h4>\\n<ul>\\n<li>Rows were defined as a sPL_expr to facilitate extensions to support row\\nselection, insertion and deletion should I choose to implement those\\nfunctions.</li>\\n<li>Projections were defined as a type to facilitate the processing of the\\nprojection operator. The projection operator was defined as a binary operator\\nthat operates on a left Relation and a right Projection.</li>\\n<li>ProjectionType was included to support type checking and type infererence of\\nProjection expressions.</li>\\n<li>Rows were treated as RelationType expressions.</li>\\n</ul>\\n<h4>Extended sPL_type</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ocaml\\\"><code><span class=\\\"token keyword\\\">type</span> sPL<span class=\\\"token punctuation\\\">_</span>type <span class=\\\"token operator\\\">=</span>\\n  <span class=\\\"token operator\\\">|</span> BoolType\\n  <span class=\\\"token operator\\\">|</span> IntType\\n  <span class=\\\"token operator\\\">|</span> Arrow <span class=\\\"token keyword\\\">of</span> sPL<span class=\\\"token punctuation\\\">_</span>type <span class=\\\"token operator\\\">*</span> sPL<span class=\\\"token punctuation\\\">_</span>type\\n  <span class=\\\"token comment\\\">(* NEW *)</span>\\n  <span class=\\\"token operator\\\">|</span> RelationType <span class=\\\"token keyword\\\">of</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>id <span class=\\\"token operator\\\">*</span> sPL<span class=\\\"token punctuation\\\">_</span>type<span class=\\\"token punctuation\\\">)</span> list<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token operator\\\">|</span> ProjType\\n</code></pre>\\n      </div>\\n<h4>Extended sPL_expr</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ocaml\\\"><code><span class=\\\"token keyword\\\">type</span> sPL<span class=\\\"token punctuation\\\">_</span>expr <span class=\\\"token operator\\\">=</span>\\n  <span class=\\\"token operator\\\">|</span> BoolConst <span class=\\\"token keyword\\\">of</span> bool\\n  <span class=\\\"token operator\\\">|</span> IntConst <span class=\\\"token keyword\\\">of</span> int\\n  <span class=\\\"token operator\\\">|</span> Var <span class=\\\"token keyword\\\">of</span> id\\n  <span class=\\\"token operator\\\">|</span> UnaryPrimApp <span class=\\\"token keyword\\\">of</span> op<span class=\\\"token punctuation\\\">_</span>id <span class=\\\"token operator\\\">*</span> sPL<span class=\\\"token punctuation\\\">_</span>expr\\n  <span class=\\\"token operator\\\">|</span> BinaryPrimApp <span class=\\\"token keyword\\\">of</span> op<span class=\\\"token punctuation\\\">_</span>id <span class=\\\"token operator\\\">*</span> sPL<span class=\\\"token punctuation\\\">_</span>expr <span class=\\\"token operator\\\">*</span> sPL<span class=\\\"token punctuation\\\">_</span>expr\\n  <span class=\\\"token operator\\\">|</span> Cond <span class=\\\"token keyword\\\">of</span> sPL<span class=\\\"token punctuation\\\">_</span>expr <span class=\\\"token operator\\\">*</span> sPL<span class=\\\"token punctuation\\\">_</span>expr <span class=\\\"token operator\\\">*</span> sPL<span class=\\\"token punctuation\\\">_</span>expr\\n  <span class=\\\"token operator\\\">|</span> Func <span class=\\\"token keyword\\\">of</span> sPL<span class=\\\"token punctuation\\\">_</span>type <span class=\\\"token operator\\\">*</span> <span class=\\\"token punctuation\\\">(</span>id list<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> sPL<span class=\\\"token punctuation\\\">_</span>expr\\n  <span class=\\\"token operator\\\">|</span> RecFunc <span class=\\\"token keyword\\\">of</span> sPL<span class=\\\"token punctuation\\\">_</span>type <span class=\\\"token operator\\\">*</span> id <span class=\\\"token operator\\\">*</span> <span class=\\\"token punctuation\\\">(</span>id list<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> sPL<span class=\\\"token punctuation\\\">_</span>expr\\n  <span class=\\\"token operator\\\">|</span> Appln <span class=\\\"token keyword\\\">of</span> sPL<span class=\\\"token punctuation\\\">_</span>expr <span class=\\\"token operator\\\">*</span> sPL<span class=\\\"token punctuation\\\">_</span>type option <span class=\\\"token operator\\\">*</span> <span class=\\\"token punctuation\\\">(</span>sPL<span class=\\\"token punctuation\\\">_</span>expr list<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token operator\\\">|</span> Let <span class=\\\"token keyword\\\">of</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>sPL<span class=\\\"token punctuation\\\">_</span>type <span class=\\\"token operator\\\">*</span> id <span class=\\\"token operator\\\">*</span> sPL<span class=\\\"token punctuation\\\">_</span>expr<span class=\\\"token punctuation\\\">)</span> list<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> sPL<span class=\\\"token punctuation\\\">_</span>type <span class=\\\"token operator\\\">*</span> sPL<span class=\\\"token punctuation\\\">_</span>expr\\n  <span class=\\\"token comment\\\">(* NEW *)</span>\\n  <span class=\\\"token operator\\\">|</span> Row <span class=\\\"token keyword\\\">of</span> sPL<span class=\\\"token punctuation\\\">_</span>expr list\\n  <span class=\\\"token operator\\\">|</span> Relation <span class=\\\"token keyword\\\">of</span> sPL<span class=\\\"token punctuation\\\">_</span>type <span class=\\\"token operator\\\">*</span> <span class=\\\"token punctuation\\\">(</span>sPL<span class=\\\"token punctuation\\\">_</span>expr list<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token operator\\\">|</span> Proj <span class=\\\"token keyword\\\">of</span> id list\\n</code></pre>\\n      </div>\\n<h2>Syntax for Relations</h2>\\n<p>The relation syntax mainly follows the style guidelines provided by the project\\ninstruction.</p>\\n<h4>Row type - taken from relation1.spl</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code>row <span class=\\\"token number\\\">23</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">;</span> end\\n</code></pre>\\n      </div>\\n<h4>Relation type - taken from relation2.spl</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code>relation <span class=\\\"token punctuation\\\">{</span>relationtype id<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">;</span> age<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">;</span> end<span class=\\\"token punctuation\\\">}</span>\\n\\trow <span class=\\\"token number\\\">33</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">6</span><span class=\\\"token punctuation\\\">;</span> end\\n\\trow <span class=\\\"token number\\\">54</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">4</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span> end\\nend\\n</code></pre>\\n      </div>\\n<h4>Join syntax - taken from relation4.spl</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code>relation <span class=\\\"token punctuation\\\">{</span>relationtype id<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">;</span> age<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">;</span> is_male<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> end<span class=\\\"token punctuation\\\">}</span>\\n\\trow <span class=\\\"token number\\\">33</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">4</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span> true<span class=\\\"token punctuation\\\">;</span> end\\n\\trow <span class=\\\"token number\\\">54</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span> false<span class=\\\"token punctuation\\\">;</span> end\\n\\trow <span class=\\\"token number\\\">23</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">;</span> end\\n\\trow <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">2</span><span class=\\\"token operator\\\">*</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">45</span><span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">45</span><span class=\\\"token punctuation\\\">;</span> end\\nend\\n\\n<span class=\\\"token operator\\\">|</span><span class=\\\"token operator\\\">></span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">|</span>\\n\\nrelation <span class=\\\"token punctuation\\\">{</span>relationtype id<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">;</span> is_student<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> is_tall<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> end<span class=\\\"token punctuation\\\">}</span>\\n\\trow <span class=\\\"token number\\\">33</span><span class=\\\"token punctuation\\\">;</span> true<span class=\\\"token punctuation\\\">;</span> false<span class=\\\"token punctuation\\\">;</span> end\\n\\trow <span class=\\\"token number\\\">54</span><span class=\\\"token punctuation\\\">;</span> true<span class=\\\"token punctuation\\\">;</span> true<span class=\\\"token punctuation\\\">;</span> end\\nend\\n</code></pre>\\n      </div>\\n<h4>Projection type - excerpted from relation7.spl</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code>projection <span class=\\\"token punctuation\\\">(</span>id is_student<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<h4>Projection syntax - taken from relation5.spl</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-c\\\"><code>relation <span class=\\\"token punctuation\\\">{</span>relationtype id<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">;</span> age<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">;</span> is_male<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> end<span class=\\\"token punctuation\\\">}</span>\\n\\trow <span class=\\\"token number\\\">33</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">4</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span> true<span class=\\\"token punctuation\\\">;</span> end\\n\\trow <span class=\\\"token number\\\">54</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span> false<span class=\\\"token punctuation\\\">;</span> end\\n\\trow <span class=\\\"token number\\\">23</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">;</span> end\\n\\trow <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">2</span><span class=\\\"token operator\\\">*</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">45</span><span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">45</span><span class=\\\"token punctuation\\\">;</span> end\\n\\trow <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">65</span><span class=\\\"token punctuation\\\">;</span> true<span class=\\\"token punctuation\\\">;</span> end\\nend\\n\\n<span class=\\\"token operator\\\">||</span><span class=\\\"token operator\\\">|</span>\\n\\nprojection <span class=\\\"token punctuation\\\">(</span>id is_male<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<h2>Tokens and Lexer</h2>\\n<p>Defined new tokens and extended the lexer to support the parsing of relations.</p>\\n<h4>Tokens</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ocaml\\\"><code><span class=\\\"token keyword\\\">type</span> sPL<span class=\\\"token punctuation\\\">_</span>token <span class=\\\"token operator\\\">=</span>\\n  <span class=\\\"token operator\\\">|</span> IDENTIFIER <span class=\\\"token keyword\\\">of</span> string\\n  <span class=\\\"token operator\\\">|</span> INT<span class=\\\"token punctuation\\\">_</span>LIT <span class=\\\"token keyword\\\">of</span> int <span class=\\\"token operator\\\">*</span> string\\n  <span class=\\\"token operator\\\">|</span> CHAR<span class=\\\"token punctuation\\\">_</span>LIT <span class=\\\"token keyword\\\">of</span> char <span class=\\\"token operator\\\">*</span> string\\n  <span class=\\\"token operator\\\">|</span> STRING <span class=\\\"token keyword\\\">of</span> string <span class=\\\"token operator\\\">*</span> string\\n  <span class=\\\"token operator\\\">|</span> TRUE <span class=\\\"token operator\\\">|</span> FALSE\\n  <span class=\\\"token operator\\\">|</span> INT<span class=\\\"token punctuation\\\">_</span>TYP <span class=\\\"token operator\\\">|</span> BOOL<span class=\\\"token punctuation\\\">_</span>TYP\\n  <span class=\\\"token operator\\\">|</span> PLUS <span class=\\\"token operator\\\">|</span> UMINUS <span class=\\\"token operator\\\">|</span> MINUS <span class=\\\"token operator\\\">|</span> STAR <span class=\\\"token operator\\\">|</span> DIV\\n  <span class=\\\"token operator\\\">|</span> EQ <span class=\\\"token operator\\\">|</span> LT <span class=\\\"token operator\\\">|</span> GT\\n  <span class=\\\"token operator\\\">|</span> AND <span class=\\\"token operator\\\">|</span> OR <span class=\\\"token operator\\\">|</span> NEG\\n  <span class=\\\"token operator\\\">|</span> LETWORD <span class=\\\"token operator\\\">|</span> INWORD <span class=\\\"token operator\\\">|</span> ENDWORD\\n  <span class=\\\"token operator\\\">|</span> FUN <span class=\\\"token operator\\\">|</span> RECFUN <span class=\\\"token operator\\\">|</span> RARROW\\n  <span class=\\\"token operator\\\">|</span> OPAREN <span class=\\\"token operator\\\">|</span> CPAREN\\n  <span class=\\\"token operator\\\">|</span> OBRACE <span class=\\\"token operator\\\">|</span> CBRACE\\n  <span class=\\\"token operator\\\">|</span> IFWORD <span class=\\\"token operator\\\">|</span> THENWORD <span class=\\\"token operator\\\">|</span> ELSEWORD\\n  <span class=\\\"token comment\\\">(* NEW *)</span>\\n  <span class=\\\"token operator\\\">|</span> EOF <span class=\\\"token operator\\\">|</span> RELATIONWORD <span class=\\\"token operator\\\">|</span> ROWWORD\\n  <span class=\\\"token operator\\\">|</span> RELATION<span class=\\\"token punctuation\\\">_</span>TYP <span class=\\\"token operator\\\">|</span> COLON <span class=\\\"token operator\\\">|</span> SEMICOLON\\n  <span class=\\\"token operator\\\">|</span> JOIN <span class=\\\"token operator\\\">|</span> PROJECT <span class=\\\"token operator\\\">|</span> PROJWORD <span class=\\\"token operator\\\">|</span> PROJ<span class=\\\"token punctuation\\\">_</span>TYP\\n</code></pre>\\n      </div>\\n<h4>Lexer - keywords</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ocaml\\\"><code> <span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">_</span> <span class=\\\"token operator\\\">=</span> List<span class=\\\"token punctuation\\\">.</span>map <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">fun</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>k<span class=\\\"token punctuation\\\">,</span>t<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">(</span>string<span class=\\\"token operator\\\">*</span>sPL<span class=\\\"token punctuation\\\">_</span>token<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-></span> Hashtbl<span class=\\\"token punctuation\\\">.</span>add sPL<span class=\\\"token punctuation\\\">_</span>keywords k t<span class=\\\"token punctuation\\\">)</span>\\n\\t<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"int\\\"</span><span class=\\\"token punctuation\\\">,</span> INT<span class=\\\"token punctuation\\\">_</span>TYP<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n   <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"bool\\\"</span><span class=\\\"token punctuation\\\">,</span> BOOL<span class=\\\"token punctuation\\\">_</span>TYP<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n   <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"true\\\"</span><span class=\\\"token punctuation\\\">,</span> TRUE<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n   <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"false\\\"</span><span class=\\\"token punctuation\\\">,</span> FALSE<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n   <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"let\\\"</span><span class=\\\"token punctuation\\\">,</span> LETWORD<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"in\\\"</span><span class=\\\"token punctuation\\\">,</span> INWORD<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"end\\\"</span><span class=\\\"token punctuation\\\">,</span> ENDWORD<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n   <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"fun\\\"</span><span class=\\\"token punctuation\\\">,</span> FUN<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n   <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"recfun\\\"</span><span class=\\\"token punctuation\\\">,</span> RECFUN<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n   <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"if\\\"</span> <span class=\\\"token punctuation\\\">,</span> IFWORD<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n   <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"then\\\"</span><span class=\\\"token punctuation\\\">,</span> THENWORD<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n   <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"else\\\"</span><span class=\\\"token punctuation\\\">,</span> ELSEWORD<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n   <span class=\\\"token comment\\\">(* NEW *)</span>\\n   <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"relation\\\"</span><span class=\\\"token punctuation\\\">,</span> RELATIONWORD<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n   <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"row\\\"</span><span class=\\\"token punctuation\\\">,</span> ROWWORD<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n   <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"relationtype\\\"</span><span class=\\\"token punctuation\\\">,</span> RELATION<span class=\\\"token punctuation\\\">_</span>TYP<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n   <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"projection\\\"</span><span class=\\\"token punctuation\\\">,</span> PROJWORD<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n   <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"projectiontype\\\"</span><span class=\\\"token punctuation\\\">,</span> PROJ<span class=\\\"token punctuation\\\">_</span>TYP<span class=\\\"token punctuation\\\">)</span>\\n <span class=\\\"token punctuation\\\">]</span>\\n</code></pre>\\n      </div>\\n<h4>Lexer - operators</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ocaml\\\"><code>  <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">'+'</span> <span class=\\\"token punctuation\\\">{</span>PLUS<span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">'-'</span> <span class=\\\"token punctuation\\\">{</span>MINUS<span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">'~'</span> <span class=\\\"token punctuation\\\">{</span>UMINUS<span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">'*'</span> <span class=\\\"token punctuation\\\">{</span>STAR<span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">'/'</span> <span class=\\\"token punctuation\\\">{</span>DIV<span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">'='</span> <span class=\\\"token punctuation\\\">{</span>EQ<span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">'&lt;'</span> <span class=\\\"token punctuation\\\">{</span>LT<span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">'>'</span> <span class=\\\"token punctuation\\\">{</span>GT<span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">'&amp;'</span> <span class=\\\"token punctuation\\\">{</span>AND<span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">'|'</span> <span class=\\\"token punctuation\\\">{</span>OR<span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">'\\\\\\\\'</span> <span class=\\\"token punctuation\\\">{</span>NEG<span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">\\\"->\\\"</span> <span class=\\\"token punctuation\\\">{</span>RARROW<span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token comment\\\">(* NEW *)</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">'('</span> <span class=\\\"token punctuation\\\">{</span>OPAREN<span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">')'</span> <span class=\\\"token punctuation\\\">{</span>CPAREN<span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">'{'</span> <span class=\\\"token punctuation\\\">{</span>OBRACE<span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">'}'</span> <span class=\\\"token punctuation\\\">{</span>CBRACE<span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">':'</span> <span class=\\\"token punctuation\\\">{</span>COLON<span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">';'</span> <span class=\\\"token punctuation\\\">{</span>SEMICOLON<span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">\\\"|>&lt;|\\\"</span> <span class=\\\"token punctuation\\\">{</span>JOIN<span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">\\\"|||\\\"</span> <span class=\\\"token punctuation\\\">{</span>PROJECT<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>Parser</h2>\\n<p>Extended parser to support relations.</p>\\n<h4>Supporting Parser Elements</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ocaml\\\"><code>  args<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">[</span> al <span class=\\\"token operator\\\">=</span> LIST1 <span class=\\\"token punctuation\\\">[</span><span class=\\\"token type variable\\\">`IDENTIFIER</span> s <span class=\\\"token operator\\\">-></span> s<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">-></span> al <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  decl<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token type variable\\\">`OBRACE</span><span class=\\\"token punctuation\\\">;</span>t<span class=\\\"token operator\\\">=</span>typ<span class=\\\"token punctuation\\\">;</span><span class=\\\"token type variable\\\">`CBRACE</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token type variable\\\">`IDENTIFIER</span> s<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token type variable\\\">`EQ</span><span class=\\\"token punctuation\\\">;</span> e <span class=\\\"token operator\\\">=</span> expr <span class=\\\"token operator\\\">-></span> <span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token punctuation\\\">,</span>s<span class=\\\"token punctuation\\\">,</span>e<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  ldecl<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">[</span>ld <span class=\\\"token operator\\\">=</span> LIST1 decl <span class=\\\"token operator\\\">-></span> ld<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\">(* NEW *)</span>\\n  tup<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token type variable\\\">`IDENTIFIER</span> s<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token type variable\\\">`COLON</span><span class=\\\"token punctuation\\\">;</span> t<span class=\\\"token operator\\\">=</span>typ<span class=\\\"token punctuation\\\">;</span><span class=\\\"token type variable\\\">`SEMICOLON</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">,</span>t<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  elem<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">[</span>e<span class=\\\"token operator\\\">=</span>expr<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token type variable\\\">`SEMICOLON</span> <span class=\\\"token operator\\\">-></span> e <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h4>Type Parser</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ocaml\\\"><code>  typ<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token type variable\\\">`BOOL_TYP</span> <span class=\\\"token operator\\\">-></span> BoolType\\n        <span class=\\\"token operator\\\">|</span> <span class=\\\"token type variable\\\">`INT_TYP</span> <span class=\\\"token operator\\\">-></span> IntType<span class=\\\"token punctuation\\\">]</span>\\n        <span class=\\\"token operator\\\">|</span> RIGHTA\\n          <span class=\\\"token punctuation\\\">[</span>t1<span class=\\\"token operator\\\">=</span>SELF<span class=\\\"token punctuation\\\">;</span><span class=\\\"token type variable\\\">`RARROW</span><span class=\\\"token punctuation\\\">;</span>t2<span class=\\\"token operator\\\">=</span>SELF <span class=\\\"token operator\\\">-></span> Arrow<span class=\\\"token punctuation\\\">(</span>t1<span class=\\\"token punctuation\\\">,</span>t2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">]</span>\\n        <span class=\\\"token operator\\\">|</span> <span class=\\\"token punctuation\\\">[</span>peek<span class=\\\"token punctuation\\\">_</span>typ<span class=\\\"token punctuation\\\">;</span><span class=\\\"token type variable\\\">`OPAREN</span><span class=\\\"token punctuation\\\">;</span>t<span class=\\\"token operator\\\">=</span>SELF<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token type variable\\\">`CPAREN</span> <span class=\\\"token operator\\\">-></span> t\\n        <span class=\\\"token comment\\\">(* NEW *)</span>\\n        <span class=\\\"token operator\\\">|</span> <span class=\\\"token type variable\\\">`RELATION_TYP</span><span class=\\\"token punctuation\\\">;</span> tuples <span class=\\\"token operator\\\">=</span> LIST1 tup<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token type variable\\\">`ENDWORD</span> <span class=\\\"token operator\\\">-></span> RelationType <span class=\\\"token punctuation\\\">(</span>tuples<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token operator\\\">|</span> <span class=\\\"token type variable\\\">`PROJ_TYP</span> <span class=\\\"token operator\\\">-></span> ProjType\\n  <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h4>Expression Parser - truncated for ease of view</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ocaml\\\"><code>  expr<span class=\\\"token punctuation\\\">:</span>\\n     <span class=\\\"token punctuation\\\">[</span>\\n      <span class=\\\"token comment\\\">(* New *)</span>\\n      <span class=\\\"token string\\\">\\\"Relation\\\"</span> NONA\\n          <span class=\\\"token punctuation\\\">[</span> <span class=\\\"token type variable\\\">`ROWWORD</span><span class=\\\"token punctuation\\\">;</span> e <span class=\\\"token operator\\\">=</span> LIST1 elem<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token type variable\\\">`ENDWORD</span> <span class=\\\"token operator\\\">-></span> Row<span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span>\\n          <span class=\\\"token operator\\\">|</span> <span class=\\\"token type variable\\\">`RELATIONWORD</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token type variable\\\">`OBRACE</span><span class=\\\"token punctuation\\\">;</span> t <span class=\\\"token operator\\\">=</span> typ<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token type variable\\\">`CBRACE</span><span class=\\\"token punctuation\\\">;</span> r <span class=\\\"token operator\\\">=</span> LIST1 SELF<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token type variable\\\">`ENDWORD</span> <span class=\\\"token operator\\\">-></span> Relation<span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token punctuation\\\">,</span>r<span class=\\\"token punctuation\\\">)</span>\\n          <span class=\\\"token operator\\\">|</span> <span class=\\\"token type variable\\\">`PROJWORD</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token type variable\\\">`OPAREN</span><span class=\\\"token punctuation\\\">;</span> al <span class=\\\"token operator\\\">=</span> args<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token type variable\\\">`CPAREN</span> <span class=\\\"token operator\\\">-></span> Proj<span class=\\\"token punctuation\\\">(</span>al<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">]</span>\\n      <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">\\\"Join Project\\\"</span> LEFTA\\n          <span class=\\\"token punctuation\\\">[</span> e1 <span class=\\\"token operator\\\">=</span> SELF<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token type variable\\\">`JOIN</span><span class=\\\"token punctuation\\\">;</span> e2 <span class=\\\"token operator\\\">=</span> SELF <span class=\\\"token operator\\\">-></span> BinaryPrimApp <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"|>&lt;|\\\"</span><span class=\\\"token punctuation\\\">,</span>e1<span class=\\\"token punctuation\\\">,</span>e2<span class=\\\"token punctuation\\\">)</span>\\n          <span class=\\\"token operator\\\">|</span> e1 <span class=\\\"token operator\\\">=</span> SELF<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token type variable\\\">`PROJECT</span><span class=\\\"token punctuation\\\">;</span> e2 <span class=\\\"token operator\\\">=</span> SELF <span class=\\\"token operator\\\">-></span> BinaryPrimApp <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"|||\\\"</span><span class=\\\"token punctuation\\\">,</span>e1<span class=\\\"token punctuation\\\">,</span>e2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">]</span>\\n          <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>\\n          <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>\\n          <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>\\n      <span class=\\\"token punctuation\\\">]</span>\\n</code></pre>\\n      </div>\\n<h2>Discussion of type checking and type inference</h2>\\n<p>The code from here on out is far too lengthy and complicated, hence it will no\\nlonger be purposeful to include the code snippets in this document. I shall\\napproach the rest of the document mainly through prosaic discourse. Code\\nsnippets are only included where relevant to discussion.</p>\\n<h4>Type Checking - Types</h4>\\n<ul>\\n<li>Relation - Check type given against the type of all rows in the relation</li>\\n<li>Row - Check type of each element in a row against the type inherited from the\\nrelation</li>\\n<li>Projection - Check that it is of ProjectionType</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ocaml\\\"><code>      <span class=\\\"token operator\\\">|</span> Row row<span class=\\\"token punctuation\\\">_</span>content <span class=\\\"token operator\\\">-></span>\\n          <span class=\\\"token keyword\\\">begin</span>\\n            <span class=\\\"token keyword\\\">match</span> t <span class=\\\"token keyword\\\">with</span>\\n              <span class=\\\"token operator\\\">|</span> RelationType <span class=\\\"token punctuation\\\">(</span>type<span class=\\\"token punctuation\\\">_</span>tuples<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-></span>\\n                  <span class=\\\"token keyword\\\">begin</span>\\n                    <span class=\\\"token keyword\\\">let</span> row<span class=\\\"token punctuation\\\">_</span>type <span class=\\\"token operator\\\">=</span> List<span class=\\\"token punctuation\\\">.</span>map2 <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">fun</span> <span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">,</span>t<span class=\\\"token punctuation\\\">)</span> e <span class=\\\"token operator\\\">-></span> <span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">,</span>t<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> type<span class=\\\"token punctuation\\\">_</span>tuples row<span class=\\\"token punctuation\\\">_</span>content <span class=\\\"token keyword\\\">in</span>\\n                    List<span class=\\\"token punctuation\\\">.</span>for<span class=\\\"token punctuation\\\">_</span>all <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">fun</span> <span class=\\\"token punctuation\\\">(</span>ea<span class=\\\"token punctuation\\\">,</span>ta<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-></span> aux env ea ta<span class=\\\"token punctuation\\\">)</span> row<span class=\\\"token punctuation\\\">_</span>type\\n                  <span class=\\\"token keyword\\\">end</span>\\n              <span class=\\\"token operator\\\">|</span> <span class=\\\"token punctuation\\\">_</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token boolean\\\">false</span>\\n          <span class=\\\"token keyword\\\">end</span>\\n\\n      <span class=\\\"token operator\\\">|</span> Relation <span class=\\\"token punctuation\\\">(</span>t1<span class=\\\"token punctuation\\\">,</span> rows<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-></span>\\n          <span class=\\\"token keyword\\\">if</span> t1 <span class=\\\"token operator\\\">=</span> t <span class=\\\"token keyword\\\">then</span>\\n            <span class=\\\"token keyword\\\">let</span> row<span class=\\\"token punctuation\\\">_</span>verify <span class=\\\"token operator\\\">=</span> List<span class=\\\"token punctuation\\\">.</span>rev<span class=\\\"token punctuation\\\">_</span>map <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">fun</span> row <span class=\\\"token operator\\\">-></span> aux env row t<span class=\\\"token punctuation\\\">)</span> rows <span class=\\\"token keyword\\\">in</span>\\n            List<span class=\\\"token punctuation\\\">.</span>fold<span class=\\\"token punctuation\\\">_</span>left <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">fun</span> a b <span class=\\\"token operator\\\">-></span> a <span class=\\\"token operator\\\">&amp;&amp;</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token boolean\\\">true</span> row<span class=\\\"token punctuation\\\">_</span>verify\\n          <span class=\\\"token keyword\\\">else</span> <span class=\\\"token boolean\\\">false</span>\\n      <span class=\\\"token operator\\\">|</span> Proj <span class=\\\"token punctuation\\\">_</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token keyword\\\">if</span> t<span class=\\\"token operator\\\">=</span>ProjType <span class=\\\"token keyword\\\">then</span> <span class=\\\"token boolean\\\">true</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token boolean\\\">false</span>\\n</code></pre>\\n      </div>\\n<h4>Type Checking - Operators</h4>\\n<ul>\\n<li>Join Operator - Check that both arguments on either side are relations</li>\\n<li>Projection Operator - Check that the left argument is a relation and the right\\nargument is a Projection</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ocaml\\\"><code>              <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">\\\"|>&lt;|\\\"</span><span class=\\\"token punctuation\\\">,</span>RelationType<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">_</span><span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token operator\\\">-></span>\\n                  <span class=\\\"token keyword\\\">begin</span>\\n                    <span class=\\\"token keyword\\\">match</span> arg1<span class=\\\"token punctuation\\\">,</span>arg2 <span class=\\\"token keyword\\\">with</span>\\n                      <span class=\\\"token operator\\\">|</span> Relation<span class=\\\"token punctuation\\\">(</span>t1<span class=\\\"token punctuation\\\">,</span>e1<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> Relation<span class=\\\"token punctuation\\\">(</span>t2<span class=\\\"token punctuation\\\">,</span>e2<span class=\\\"token punctuation\\\">)</span>\\n                        <span class=\\\"token operator\\\">-></span> <span class=\\\"token punctuation\\\">(</span>aux env arg1 t1<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token punctuation\\\">(</span>aux env arg2 t2<span class=\\\"token punctuation\\\">)</span>\\n                      <span class=\\\"token operator\\\">|</span> <span class=\\\"token punctuation\\\">_</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">_</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token boolean\\\">false</span>\\n                  <span class=\\\"token keyword\\\">end</span>\\n              <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">\\\"|||\\\"</span><span class=\\\"token punctuation\\\">,</span>RelationType<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">_</span><span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token operator\\\">-></span>\\n                  <span class=\\\"token keyword\\\">begin</span>\\n                    <span class=\\\"token keyword\\\">match</span> arg1<span class=\\\"token punctuation\\\">,</span>arg2 <span class=\\\"token keyword\\\">with</span>\\n                      <span class=\\\"token operator\\\">|</span> Relation<span class=\\\"token punctuation\\\">(</span>RelationType<span class=\\\"token punctuation\\\">(</span>l1<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>e1<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> Proj projections\\n                        <span class=\\\"token operator\\\">-></span> <span class=\\\"token punctuation\\\">(</span>aux env arg1 <span class=\\\"token punctuation\\\">(</span>RelationType<span class=\\\"token punctuation\\\">(</span>l1<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&amp;&amp;</span> List<span class=\\\"token punctuation\\\">.</span>for<span class=\\\"token punctuation\\\">_</span>all <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">fun</span> x <span class=\\\"token operator\\\">-></span> List<span class=\\\"token punctuation\\\">.</span>exists \\t\\t\\t\\t\\t\\t\\t\\t<span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">fun</span> <span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">,</span>t<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-></span> id <span class=\\\"token operator\\\">=</span> x<span class=\\\"token punctuation\\\">)</span> l1<span class=\\\"token punctuation\\\">)</span> projections\\n                      <span class=\\\"token operator\\\">|</span> <span class=\\\"token punctuation\\\">_</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">_</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token boolean\\\">false</span>\\n                  <span class=\\\"token keyword\\\">end</span>\\n</code></pre>\\n      </div>\\n<h4>Type Inference</h4>\\n<ul>\\n<li>Rows were inferred to be of type RelationType but with placeholder values in\\neach tag.</li>\\n<li>Relations had its type inferred based on the the type of its rows.</li>\\n<li>Projections were inferred to be ProjectionType.</li>\\n<li>Join and Projection operators inferred the type of the Relation that is the\\nresult of the operation.</li>\\n</ul>\\n<h2>Interpreter</h2>\\n<p>The developed interpreter is able to interpret all expressions available to the\\nextended sPL language. This can be observed through the output files generated\\nby the full testing suite test6.sh.</p>\\n<h4>Complex interpretation capabilities</h4>\\n<p>The output of relation6.spl and relation9.spl display the interpreter's ability\\nto handle let constructs, functions, and function applications.</p>\\n<h6>Relation6.spl</h6>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ocaml\\\"><code><span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">{</span>relationtype id<span class=\\\"token punctuation\\\">:</span> int<span class=\\\"token punctuation\\\">;</span> age<span class=\\\"token punctuation\\\">:</span> int<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>male<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span><span class=\\\"token punctuation\\\">}</span> r <span class=\\\"token operator\\\">=</span> relation <span class=\\\"token punctuation\\\">{</span>relationtype id<span class=\\\"token punctuation\\\">:</span> int<span class=\\\"token punctuation\\\">;</span> age<span class=\\\"token punctuation\\\">:</span> int<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>male<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span><span class=\\\"token punctuation\\\">}</span>\\n\\trow <span class=\\\"token number\\\">33</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">4</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span>\\n\\trow <span class=\\\"token number\\\">54</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span>\\n\\trow <span class=\\\"token number\\\">23</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span>\\n\\trow <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">2</span><span class=\\\"token operator\\\">*</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">45</span><span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">45</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span>\\n<span class=\\\"token keyword\\\">end</span> <span class=\\\"token keyword\\\">in</span> <span class=\\\"token punctuation\\\">{</span>relationtype id<span class=\\\"token punctuation\\\">:</span> int<span class=\\\"token punctuation\\\">;</span> age<span class=\\\"token punctuation\\\">:</span> int<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>male<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>student<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>tall<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span><span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">{</span>relationtype id<span class=\\\"token punctuation\\\">:</span> int<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>student<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>tall<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span><span class=\\\"token punctuation\\\">}</span> s <span class=\\\"token operator\\\">=</span> relation <span class=\\\"token punctuation\\\">{</span>relationtype id<span class=\\\"token punctuation\\\">:</span> int<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>student<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>tall<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span><span class=\\\"token punctuation\\\">}</span>\\n\\trow <span class=\\\"token number\\\">33</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span>\\n\\trow <span class=\\\"token number\\\">54</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span>\\n<span class=\\\"token keyword\\\">end</span> <span class=\\\"token keyword\\\">in</span>\\n\\n<span class=\\\"token punctuation\\\">{</span>relationtype id<span class=\\\"token punctuation\\\">:</span> int<span class=\\\"token punctuation\\\">;</span> age<span class=\\\"token punctuation\\\">:</span> int<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>male<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>student<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>tall<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span><span class=\\\"token punctuation\\\">}</span> r <span class=\\\"token operator\\\">|>&lt;|</span> s <span class=\\\"token keyword\\\">end</span> <span class=\\\"token keyword\\\">end</span>\\n</code></pre>\\n      </div>\\n<h6>Relation9.spl</h6>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ocaml\\\"><code><span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">{</span>int<span class=\\\"token punctuation\\\">}</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token keyword\\\">in</span> <span class=\\\"token punctuation\\\">{</span>relationtype id<span class=\\\"token punctuation\\\">:</span> int<span class=\\\"token punctuation\\\">;</span> age<span class=\\\"token punctuation\\\">:</span> int<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>male<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>student<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>tall<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span><span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">{</span>relationtype id<span class=\\\"token punctuation\\\">:</span> int<span class=\\\"token punctuation\\\">;</span> age<span class=\\\"token punctuation\\\">:</span> int<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>male<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span><span class=\\\"token punctuation\\\">}</span> r <span class=\\\"token operator\\\">=</span> relation <span class=\\\"token punctuation\\\">{</span>relationtype id<span class=\\\"token punctuation\\\">:</span> int<span class=\\\"token punctuation\\\">;</span> age<span class=\\\"token punctuation\\\">:</span> int<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>male<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span><span class=\\\"token punctuation\\\">}</span>\\n\\trow <span class=\\\"token number\\\">33</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">4</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span>\\n\\trow <span class=\\\"token number\\\">54</span><span class=\\\"token punctuation\\\">;</span> a<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span>\\n\\trow <span class=\\\"token number\\\">23</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span>\\n\\trow <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">2</span><span class=\\\"token operator\\\">*</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">45</span><span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">45</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span>\\n<span class=\\\"token keyword\\\">end</span> <span class=\\\"token keyword\\\">in</span> <span class=\\\"token punctuation\\\">{</span>relationtype id<span class=\\\"token punctuation\\\">:</span> int<span class=\\\"token punctuation\\\">;</span> age<span class=\\\"token punctuation\\\">:</span> int<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>male<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>student<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>tall<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span><span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">{</span>relationtype id<span class=\\\"token punctuation\\\">:</span> int<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>student<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>tall<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span><span class=\\\"token punctuation\\\">}</span> s <span class=\\\"token operator\\\">=</span> relation <span class=\\\"token punctuation\\\">{</span>relationtype id<span class=\\\"token punctuation\\\">:</span> int<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>student<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>tall<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span><span class=\\\"token punctuation\\\">}</span>\\n\\trow <span class=\\\"token number\\\">33</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span>\\n\\trow <span class=\\\"token number\\\">54</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span>\\n<span class=\\\"token keyword\\\">end</span> <span class=\\\"token keyword\\\">in</span>\\n\\n<span class=\\\"token punctuation\\\">{</span>relationtype id<span class=\\\"token punctuation\\\">:</span> int<span class=\\\"token punctuation\\\">;</span> age<span class=\\\"token punctuation\\\">:</span> int<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>male<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>student<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>tall<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span><span class=\\\"token punctuation\\\">}</span> r <span class=\\\"token operator\\\">|>&lt;|</span> s <span class=\\\"token keyword\\\">end</span> <span class=\\\"token keyword\\\">end</span> <span class=\\\"token keyword\\\">end</span>\\n</code></pre>\\n      </div>\\n<p>The output of relation7.spl and relation8.spl display the interpreter's ability\\nto handle sequential projection and join operations on relations.</p>\\n<h6>Relation7.spl</h6>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ocaml\\\"><code><span class=\\\"token punctuation\\\">(</span>\\nrelation <span class=\\\"token punctuation\\\">{</span>relationtype id<span class=\\\"token punctuation\\\">:</span> int<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>student<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>tall<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span><span class=\\\"token punctuation\\\">}</span>\\n\\trow <span class=\\\"token number\\\">33</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span>\\n\\trow <span class=\\\"token number\\\">54</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span>\\n<span class=\\\"token keyword\\\">end</span>\\n\\n<span class=\\\"token operator\\\">|||</span>\\n\\nprojection <span class=\\\"token punctuation\\\">(</span>id is<span class=\\\"token punctuation\\\">_</span>student<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token operator\\\">|||</span>\\n\\nprojection <span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<h6>Relation8.spl</h6>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ocaml\\\"><code><span class=\\\"token punctuation\\\">(</span>\\nrelation <span class=\\\"token punctuation\\\">{</span>relationtype id<span class=\\\"token punctuation\\\">:</span> int<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>student<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>tall<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span><span class=\\\"token punctuation\\\">}</span>\\n\\trow <span class=\\\"token number\\\">33</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span>\\n\\trow <span class=\\\"token number\\\">54</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span>\\n<span class=\\\"token keyword\\\">end</span>\\n\\n<span class=\\\"token operator\\\">|||</span>\\n\\nprojection <span class=\\\"token punctuation\\\">(</span>id is<span class=\\\"token punctuation\\\">_</span>student<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token operator\\\">|>&lt;|</span>\\n\\nrelation <span class=\\\"token punctuation\\\">{</span>relationtype id<span class=\\\"token punctuation\\\">:</span> int<span class=\\\"token punctuation\\\">;</span> age<span class=\\\"token punctuation\\\">:</span> int<span class=\\\"token punctuation\\\">;</span> is<span class=\\\"token punctuation\\\">_</span>male<span class=\\\"token punctuation\\\">:</span> bool<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span><span class=\\\"token punctuation\\\">}</span>\\n\\trow <span class=\\\"token number\\\">33</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">4</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span>\\n\\trow <span class=\\\"token number\\\">54</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span>\\n\\trow <span class=\\\"token number\\\">23</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span>\\n\\trow <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">2</span><span class=\\\"token operator\\\">*</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">45</span><span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">45</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">end</span>\\n<span class=\\\"token keyword\\\">end</span>\\n</code></pre>\\n      </div>\",\"frontmatter\":{\"date\":\"April 21, 2017\",\"path\":\"relational-programming-language\",\"title\":\"Relational Programming Language\"}}},\"pathContext\":{\"id\":\"relational-programming-language\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/blog-relational-programming-language.json\n// module id = 593\n// module chunks = 33328253871787"],"sourceRoot":""}